
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008634  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0ec  0800b0ec  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0ec  0800b0ec  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0ec  0800b0ec  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ec  0800b0ec  0001b0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800b0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000030  0800b124  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800b124  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006978  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000155c  00000000  00000000  000269d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00027f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016952  00000000  00000000  00028c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007aa5  00000000  00000000  0003f5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000812c3  00000000  00000000  00047077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c833a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000c838c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa0 	.word	0x08002aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002aa0 	.word	0x08002aa0

0800014c <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
//  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
  TFT_RES_L();
 800015c:	2200      	movs	r2, #0
 800015e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <ST7735_Reset+0x28>)
 8000164:	f001 fe0c 	bl	8001d80 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000168:	2014      	movs	r0, #20
 800016a:	f001 fb7d 	bl	8001868 <HAL_Delay>
  TFT_RES_H();
 800016e:	2201      	movs	r2, #1
 8000170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	; (8000180 <ST7735_Reset+0x28>)
 8000176:	f001 fe03 	bl	8001d80 <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010c00 	.word	0x40010c00

08000184 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <ST7735_WriteCommand+0x2c>)
 8000196:	f001 fdf3 	bl	8001d80 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800019a:	1df9      	adds	r1, r7, #7
 800019c:	f04f 33ff 	mov.w	r3, #4294967295
 80001a0:	2201      	movs	r2, #1
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <ST7735_WriteCommand+0x30>)
 80001a4:	f002 fa66 	bl	8002674 <HAL_SPI_Transmit>
#endif
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010c00 	.word	0x40010c00
 80001b4:	20000050 	.word	0x20000050

080001b8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	4807      	ldr	r0, [pc, #28]	; (80001e8 <ST7735_WriteData+0x30>)
 80001ca:	f001 fdd9 	bl	8001d80 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	f04f 33ff 	mov.w	r3, #4294967295
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <ST7735_WriteData+0x34>)
 80001da:	f002 fa4b 	bl	8002674 <HAL_SPI_Transmit>
#endif
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	20000050 	.word	0x20000050

080001f0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	1c5a      	adds	r2, r3, #1
 80001fc:	607a      	str	r2, [r7, #4]
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000202:	e034      	b.n	800026e <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	607a      	str	r2, [r7, #4]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800020e:	7afb      	ldrb	r3, [r7, #11]
 8000210:	4618      	mov	r0, r3
 8000212:	f7ff ffb7 	bl	8000184 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	1c5a      	adds	r2, r3, #1
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29b      	uxth	r3, r3
 8000224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000228:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800022a:	7abb      	ldrb	r3, [r7, #10]
 800022c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000230:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d008      	beq.n	800024a <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000238:	7abb      	ldrb	r3, [r7, #10]
 800023a:	4619      	mov	r1, r3
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f7ff ffbb 	bl	80001b8 <ST7735_WriteData>
            addr += numArgs;
 8000242:	7abb      	ldrb	r3, [r7, #10]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 800024a:	89bb      	ldrh	r3, [r7, #12]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d00e      	beq.n	800026e <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	1c5a      	adds	r2, r3, #1
 8000254:	607a      	str	r2, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800025a:	89bb      	ldrh	r3, [r7, #12]
 800025c:	2bff      	cmp	r3, #255	; 0xff
 800025e:	d102      	bne.n	8000266 <ST7735_ExecuteCommandList+0x76>
 8000260:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000264:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	4618      	mov	r0, r3
 800026a:	f001 fafd 	bl	8001868 <HAL_Delay>
    while(numCommands--)
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	1e5a      	subs	r2, r3, #1
 8000272:	73fa      	strb	r2, [r7, #15]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d1c5      	bne.n	8000204 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4604      	mov	r4, r0
 800028c:	4608      	mov	r0, r1
 800028e:	4611      	mov	r1, r2
 8000290:	461a      	mov	r2, r3
 8000292:	4623      	mov	r3, r4
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	4603      	mov	r3, r0
 8000298:	71bb      	strb	r3, [r7, #6]
 800029a:	460b      	mov	r3, r1
 800029c:	717b      	strb	r3, [r7, #5]
 800029e:	4613      	mov	r3, r2
 80002a0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002a2:	202a      	movs	r0, #42	; 0x2a
 80002a4:	f7ff ff6e 	bl	8000184 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80002a8:	2300      	movs	r3, #0
 80002aa:	733b      	strb	r3, [r7, #12]
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <ST7735_SetAddressWindow+0x88>)
 80002ae:	781a      	ldrb	r2, [r3, #0]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4413      	add	r3, r2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	737b      	strb	r3, [r7, #13]
 80002b8:	2300      	movs	r3, #0
 80002ba:	73bb      	strb	r3, [r7, #14]
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <ST7735_SetAddressWindow+0x88>)
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	797b      	ldrb	r3, [r7, #5]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002c8:	f107 030c 	add.w	r3, r7, #12
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ff72 	bl	80001b8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002d4:	202b      	movs	r0, #43	; 0x2b
 80002d6:	f7ff ff55 	bl	8000184 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <ST7735_SetAddressWindow+0x8c>)
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	4413      	add	r3, r2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <ST7735_SetAddressWindow+0x8c>)
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	793b      	ldrb	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2104      	movs	r1, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff5d 	bl	80001b8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80002fe:	202c      	movs	r0, #44	; 0x2c
 8000300:	f7ff ff40 	bl	8000184 <ST7735_WriteCommand>
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	bd90      	pop	{r4, r7, pc}
 800030c:	20000008 	.word	0x20000008
 8000310:	20000009 	.word	0x20000009

08000314 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000314:	b082      	sub	sp, #8
 8000316:	b590      	push	{r4, r7, lr}
 8000318:	b089      	sub	sp, #36	; 0x24
 800031a:	af00      	add	r7, sp, #0
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
 800031e:	4603      	mov	r3, r0
 8000320:	80fb      	strh	r3, [r7, #6]
 8000322:	460b      	mov	r3, r1
 8000324:	80bb      	strh	r3, [r7, #4]
 8000326:	4613      	mov	r3, r2
 8000328:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	b2d8      	uxtb	r0, r3
 800032e:	88bb      	ldrh	r3, [r7, #4]
 8000330:	b2d9      	uxtb	r1, r3
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	b2da      	uxtb	r2, r3
 8000336:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800033a:	4413      	add	r3, r2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	3b01      	subs	r3, #1
 8000340:	b2dc      	uxtb	r4, r3
 8000342:	88bb      	ldrh	r3, [r7, #4]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800034a:	4413      	add	r3, r2
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3b01      	subs	r3, #1
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4622      	mov	r2, r4
 8000354:	f7ff ff96 	bl	8000284 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
 800035c:	e043      	b.n	80003e6 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 800035e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	3b20      	subs	r3, #32
 8000364:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	4619      	mov	r1, r3
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	440b      	add	r3, r1
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	4413      	add	r3, r2
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
 800037e:	e029      	b.n	80003d4 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800038c:	2b00      	cmp	r3, #0
 800038e:	d00e      	beq.n	80003ae <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000390:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	b29b      	uxth	r3, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	743b      	strb	r3, [r7, #16]
 800039a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800039c:	b2db      	uxtb	r3, r3
 800039e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff06 	bl	80001b8 <ST7735_WriteData>
 80003ac:	e00f      	b.n	80003ce <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	733b      	strb	r3, [r7, #12]
 80003ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	2102      	movs	r1, #2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff fef5 	bl	80001b8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	3301      	adds	r3, #1
 80003d2:	61bb      	str	r3, [r7, #24]
 80003d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d8:	461a      	mov	r2, r3
 80003da:	69bb      	ldr	r3, [r7, #24]
 80003dc:	4293      	cmp	r3, r2
 80003de:	d3cf      	bcc.n	8000380 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	3301      	adds	r3, #1
 80003e4:	61fb      	str	r3, [r7, #28]
 80003e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003ea:	461a      	mov	r2, r3
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d3b5      	bcc.n	800035e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3724      	adds	r7, #36	; 0x24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80003fe:	b002      	add	sp, #8
 8000400:	4770      	bx	lr
	...

08000404 <ST7735_Init>:

void ST7735_Init()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  ST7735_GPIO_Init();
 8000408:	f7ff fea0 	bl	800014c <ST7735_GPIO_Init>
  TFT_CS_L();
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <ST7735_Init+0x3c>)
 8000414:	f001 fcb4 	bl	8001d80 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000418:	f7ff fe9e 	bl	8000158 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800041c:	4809      	ldr	r0, [pc, #36]	; (8000444 <ST7735_Init+0x40>)
 800041e:	f7ff fee7 	bl	80001f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000422:	4809      	ldr	r0, [pc, #36]	; (8000448 <ST7735_Init+0x44>)
 8000424:	f7ff fee4 	bl	80001f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <ST7735_Init+0x48>)
 800042a:	f7ff fee1 	bl	80001f0 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <ST7735_Init+0x3c>)
 8000436:	f001 fca3 	bl	8001d80 <HAL_GPIO_WritePin>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010c00 	.word	0x40010c00
 8000444:	08002b3c 	.word	0x08002b3c
 8000448:	08002b78 	.word	0x08002b78
 800044c:	08002b88 	.word	0x08002b88

08000450 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	80fb      	strh	r3, [r7, #6]
 800045a:	460b      	mov	r3, r1
 800045c:	80bb      	strh	r3, [r7, #4]
 800045e:	4613      	mov	r3, r2
 8000460:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <ST7735_DrawPixel+0x84>)
 8000466:	f9b2 2000 	ldrsh.w	r2, [r2]
 800046a:	4293      	cmp	r3, r2
 800046c:	da2e      	bge.n	80004cc <ST7735_DrawPixel+0x7c>
 800046e:	88bb      	ldrh	r3, [r7, #4]
 8000470:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <ST7735_DrawPixel+0x88>)
 8000472:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000476:	4293      	cmp	r3, r2
 8000478:	da28      	bge.n	80004cc <ST7735_DrawPixel+0x7c>
        return;

    TFT_CS_L();
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000480:	4816      	ldr	r0, [pc, #88]	; (80004dc <ST7735_DrawPixel+0x8c>)
 8000482:	f001 fc7d 	bl	8001d80 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	b2d8      	uxtb	r0, r3
 800048a:	88bb      	ldrh	r3, [r7, #4]
 800048c:	b2d9      	uxtb	r1, r3
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3301      	adds	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	88bb      	ldrh	r3, [r7, #4]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	3301      	adds	r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	f7ff fef1 	bl	8000284 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80004a2:	887b      	ldrh	r3, [r7, #2]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	733b      	strb	r3, [r7, #12]
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2102      	movs	r1, #2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe7d 	bl	80001b8 <ST7735_WriteData>

    TFT_CS_H();
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <ST7735_DrawPixel+0x8c>)
 80004c6:	f001 fc5b 	bl	8001d80 <HAL_GPIO_WritePin>
 80004ca:	e000      	b.n	80004ce <ST7735_DrawPixel+0x7e>
        return;
 80004cc:	bf00      	nop
}
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000006 	.word	0x20000006
 80004d8:	20000004 	.word	0x20000004
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80004e0:	b082      	sub	sp, #8
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af04      	add	r7, sp, #16
 80004e8:	603a      	str	r2, [r7, #0]
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	4603      	mov	r3, r0
 80004ee:	80fb      	strh	r3, [r7, #6]
 80004f0:	460b      	mov	r3, r1
 80004f2:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fa:	4825      	ldr	r0, [pc, #148]	; (8000590 <ST7735_DrawString+0xb0>)
 80004fc:	f001 fc40 	bl	8001d80 <HAL_GPIO_WritePin>

    while(*str)
 8000500:	e033      	b.n	800056a <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	7d3a      	ldrb	r2, [r7, #20]
 8000506:	4413      	add	r3, r2
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <ST7735_DrawString+0xb4>)
 800050a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800050e:	4293      	cmp	r3, r2
 8000510:	db16      	blt.n	8000540 <ST7735_DrawString+0x60>
        {
            x = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000516:	7d7b      	ldrb	r3, [r7, #21]
 8000518:	b29a      	uxth	r2, r3
 800051a:	88bb      	ldrh	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	7d7a      	ldrb	r2, [r7, #21]
 8000524:	4413      	add	r3, r2
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <ST7735_DrawString+0xb8>)
 8000528:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052c:	4293      	cmp	r3, r2
 800052e:	da21      	bge.n	8000574 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b20      	cmp	r3, #32
 8000536:	d103      	bne.n	8000540 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	603b      	str	r3, [r7, #0]
                continue;
 800053e:	e014      	b.n	800056a <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	88b9      	ldrh	r1, [r7, #4]
 8000546:	88f8      	ldrh	r0, [r7, #6]
 8000548:	8c3b      	ldrh	r3, [r7, #32]
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	8bbb      	ldrh	r3, [r7, #28]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	f7ff fedd 	bl	8000314 <ST7735_WriteChar>
        x += font.width;
 800055a:	7d3b      	ldrb	r3, [r7, #20]
 800055c:	b29a      	uxth	r2, r3
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4413      	add	r3, r2
 8000562:	80fb      	strh	r3, [r7, #6]
        str++;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	603b      	str	r3, [r7, #0]
    while(*str)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1c7      	bne.n	8000502 <ST7735_DrawString+0x22>
 8000572:	e000      	b.n	8000576 <ST7735_DrawString+0x96>
                break;
 8000574:	bf00      	nop
    }
    TFT_CS_H();
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <ST7735_DrawString+0xb0>)
 800057e:	f001 fbff 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800058c:	b002      	add	sp, #8
 800058e:	4770      	bx	lr
 8000590:	40010c00 	.word	0x40010c00
 8000594:	20000006 	.word	0x20000006
 8000598:	20000004 	.word	0x20000004

0800059c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	807b      	strh	r3, [r7, #2]
 80005b6:	4613      	mov	r3, r2
 80005b8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	4a3c      	ldr	r2, [pc, #240]	; (80006b0 <ST7735_FillRectangle+0x114>)
 80005be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	da6f      	bge.n	80006a6 <ST7735_FillRectangle+0x10a>
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <ST7735_FillRectangle+0x118>)
 80005ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	da69      	bge.n	80006a6 <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 80005d2:	88fa      	ldrh	r2, [r7, #6]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a35      	ldr	r2, [pc, #212]	; (80006b0 <ST7735_FillRectangle+0x114>)
 80005da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005de:	4293      	cmp	r3, r2
 80005e0:	dd06      	ble.n	80005f0 <ST7735_FillRectangle+0x54>
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <ST7735_FillRectangle+0x114>)
 80005e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <ST7735_FillRectangle+0x118>)
 80005f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005fc:	4293      	cmp	r3, r2
 80005fe:	dd06      	ble.n	800060e <ST7735_FillRectangle+0x72>
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <ST7735_FillRectangle+0x118>)
 8000602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000606:	b29a      	uxth	r2, r3
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000614:	4828      	ldr	r0, [pc, #160]	; (80006b8 <ST7735_FillRectangle+0x11c>)
 8000616:	f001 fbb3 	bl	8001d80 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	b2d8      	uxtb	r0, r3
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	b2d9      	uxtb	r1, r3
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4413      	add	r3, r2
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3b01      	subs	r3, #1
 8000630:	b2dc      	uxtb	r4, r3
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	883b      	ldrh	r3, [r7, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	3b01      	subs	r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4622      	mov	r2, r4
 8000644:	f7ff fe1e 	bl	8000284 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000648:	8c3b      	ldrh	r3, [r7, #32]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	733b      	strb	r3, [r7, #12]
 8000652:	8c3b      	ldrh	r3, [r7, #32]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4816      	ldr	r0, [pc, #88]	; (80006b8 <ST7735_FillRectangle+0x11c>)
 8000660:	f001 fb8e 	bl	8001d80 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000664:	883b      	ldrh	r3, [r7, #0]
 8000666:	80bb      	strh	r3, [r7, #4]
 8000668:	e013      	b.n	8000692 <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 800066a:	887b      	ldrh	r3, [r7, #2]
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	e00a      	b.n	8000686 <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
          //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000670:	f107 010c 	add.w	r1, r7, #12
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2202      	movs	r2, #2
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <ST7735_FillRectangle+0x120>)
 800067c:	f001 fffa 	bl	8002674 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	3b01      	subs	r3, #1
 8000684:	80fb      	strh	r3, [r7, #6]
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f1      	bne.n	8000670 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	80bb      	strh	r3, [r7, #4]
 8000692:	88bb      	ldrh	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1e8      	bne.n	800066a <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <ST7735_FillRectangle+0x11c>)
 80006a0:	f001 fb6e 	bl	8001d80 <HAL_GPIO_WritePin>
 80006a4:	e000      	b.n	80006a8 <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 80006a6:	bf00      	nop
}
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000006 	.word	0x20000006
 80006b4:	20000004 	.word	0x20000004
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	20000050 	.word	0x20000050

080006c0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <ST7735_FillScreen+0x30>)
 80006cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <ST7735_FillScreen+0x34>)
 80006d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d8:	b299      	uxth	r1, r3
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	460b      	mov	r3, r1
 80006e0:	2100      	movs	r1, #0
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ff5a 	bl	800059c <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000006 	.word	0x20000006
 80006f4:	20000004 	.word	0x20000004

080006f8 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4604      	mov	r4, r0
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4623      	mov	r3, r4
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4603      	mov	r3, r0
 800070c:	80bb      	strh	r3, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
 8000712:	4613      	mov	r3, r2
 8000714:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <ST7735_DrawImage+0xc0>)
 800071a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800071e:	4293      	cmp	r3, r2
 8000720:	da42      	bge.n	80007a8 <ST7735_DrawImage+0xb0>
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	4a25      	ldr	r2, [pc, #148]	; (80007bc <ST7735_DrawImage+0xc4>)
 8000726:	f9b2 2000 	ldrsh.w	r2, [r2]
 800072a:	4293      	cmp	r3, r2
 800072c:	da3c      	bge.n	80007a8 <ST7735_DrawImage+0xb0>
    if((x + w - 1) >= _width) return;
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	4413      	add	r3, r2
 8000734:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <ST7735_DrawImage+0xc0>)
 8000736:	f9b2 2000 	ldrsh.w	r2, [r2]
 800073a:	4293      	cmp	r3, r2
 800073c:	dc36      	bgt.n	80007ac <ST7735_DrawImage+0xb4>
    if((y + h - 1) >= _height) return;
 800073e:	88ba      	ldrh	r2, [r7, #4]
 8000740:	883b      	ldrh	r3, [r7, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <ST7735_DrawImage+0xc4>)
 8000746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800074a:	4293      	cmp	r3, r2
 800074c:	dc30      	bgt.n	80007b0 <ST7735_DrawImage+0xb8>

    TFT_CS_L();
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000754:	481a      	ldr	r0, [pc, #104]	; (80007c0 <ST7735_DrawImage+0xc8>)
 8000756:	f001 fb13 	bl	8001d80 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	b2d8      	uxtb	r0, r3
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	b2d9      	uxtb	r1, r3
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	3b01      	subs	r3, #1
 8000770:	b2dc      	uxtb	r4, r3
 8000772:	88bb      	ldrh	r3, [r7, #4]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	883b      	ldrh	r3, [r7, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	3b01      	subs	r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	4622      	mov	r2, r4
 8000784:	f7ff fd7e 	bl	8000284 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	883a      	ldrh	r2, [r7, #0]
 800078c:	fb02 f303 	mul.w	r3, r2, r3
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4619      	mov	r1, r3
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f7ff fd0f 	bl	80001b8 <ST7735_WriteData>
    TFT_CS_H();
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <ST7735_DrawImage+0xc8>)
 80007a2:	f001 faed 	bl	8001d80 <HAL_GPIO_WritePin>
 80007a6:	e004      	b.n	80007b2 <ST7735_DrawImage+0xba>
    if((x >= _width) || (y >= _height)) return;
 80007a8:	bf00      	nop
 80007aa:	e002      	b.n	80007b2 <ST7735_DrawImage+0xba>
    if((x + w - 1) >= _width) return;
 80007ac:	bf00      	nop
 80007ae:	e000      	b.n	80007b2 <ST7735_DrawImage+0xba>
    if((y + h - 1) >= _height) return;
 80007b0:	bf00      	nop
}
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000006 	.word	0x20000006
 80007bc:	20000004 	.word	0x20000004
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  TFT_BL_H();
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <ST7735_Backlight_On+0x14>)
 80007d0:	f001 fad6 	bl	8001d80 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40010c00 	.word	0x40010c00

080007dc <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80007fa:	887b      	ldrh	r3, [r7, #2]
 80007fc:	f1c3 0301 	rsb	r3, r3, #1
 8000800:	b29b      	uxth	r3, r3
 8000802:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	425b      	negs	r3, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 800081a:	88fa      	ldrh	r2, [r7, #6]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	4413      	add	r3, r2
 8000820:	b29b      	uxth	r3, r3
 8000822:	88b9      	ldrh	r1, [r7, #4]
 8000824:	883a      	ldrh	r2, [r7, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe12 	bl	8000450 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	88b9      	ldrh	r1, [r7, #4]
 8000836:	883a      	ldrh	r2, [r7, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe09 	bl	8000450 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 800083e:	88f8      	ldrh	r0, [r7, #6]
 8000840:	88ba      	ldrh	r2, [r7, #4]
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	b29b      	uxth	r3, r3
 8000848:	883a      	ldrh	r2, [r7, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	f7ff fe00 	bl	8000450 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8000850:	88f8      	ldrh	r0, [r7, #6]
 8000852:	88ba      	ldrh	r2, [r7, #4]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	4413      	add	r3, r2
 8000858:	b29b      	uxth	r3, r3
 800085a:	883a      	ldrh	r2, [r7, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f7ff fdf7 	bl	8000450 <ST7735_DrawPixel>

  while (x < r)
 8000862:	e081      	b.n	8000968 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8000864:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0e      	blt.n	800088a <ST7735_DrawCircle+0xae>
    {
      r--;
 800086c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000870:	b29b      	uxth	r3, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	3302      	adds	r3, #2
 800087c:	b29b      	uxth	r3, r3
 800087e:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8000880:	89fa      	ldrh	r2, [r7, #14]
 8000882:	897b      	ldrh	r3, [r7, #10]
 8000884:	4413      	add	r3, r2
 8000886:	b29b      	uxth	r3, r3
 8000888:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 800088a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800088e:	b29b      	uxth	r3, r3
 8000890:	3301      	adds	r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	3302      	adds	r3, #2
 800089a:	b29b      	uxth	r3, r3
 800089c:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 800089e:	89fa      	ldrh	r2, [r7, #14]
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 80008a8:	88fa      	ldrh	r2, [r7, #6]
 80008aa:	893b      	ldrh	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	b298      	uxth	r0, r3
 80008b0:	88ba      	ldrh	r2, [r7, #4]
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	4413      	add	r3, r2
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	883a      	ldrh	r2, [r7, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	f7ff fdc8 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	893b      	ldrh	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	b298      	uxth	r0, r3
 80008c8:	88ba      	ldrh	r2, [r7, #4]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	4413      	add	r3, r2
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	883a      	ldrh	r2, [r7, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	f7ff fdbc 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	893b      	ldrh	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	b298      	uxth	r0, r3
 80008e0:	88ba      	ldrh	r2, [r7, #4]
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	883a      	ldrh	r2, [r7, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	f7ff fdb0 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	893b      	ldrh	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	b298      	uxth	r0, r3
 80008f8:	88ba      	ldrh	r2, [r7, #4]
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	b29b      	uxth	r3, r3
 8000900:	883a      	ldrh	r2, [r7, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f7ff fda4 	bl	8000450 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	4413      	add	r3, r2
 800090e:	b298      	uxth	r0, r3
 8000910:	88ba      	ldrh	r2, [r7, #4]
 8000912:	893b      	ldrh	r3, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	883a      	ldrh	r2, [r7, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	f7ff fd98 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 8000920:	88fa      	ldrh	r2, [r7, #6]
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	b298      	uxth	r0, r3
 8000928:	88ba      	ldrh	r2, [r7, #4]
 800092a:	893b      	ldrh	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	b29b      	uxth	r3, r3
 8000930:	883a      	ldrh	r2, [r7, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	f7ff fd8c 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 8000938:	88fa      	ldrh	r2, [r7, #6]
 800093a:	887b      	ldrh	r3, [r7, #2]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b298      	uxth	r0, r3
 8000940:	88ba      	ldrh	r2, [r7, #4]
 8000942:	893b      	ldrh	r3, [r7, #8]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	883a      	ldrh	r2, [r7, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	f7ff fd80 	bl	8000450 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	4413      	add	r3, r2
 8000956:	b298      	uxth	r0, r3
 8000958:	88ba      	ldrh	r2, [r7, #4]
 800095a:	893b      	ldrh	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29b      	uxth	r3, r3
 8000960:	883a      	ldrh	r2, [r7, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	f7ff fd74 	bl	8000450 <ST7735_DrawPixel>
  while (x < r)
 8000968:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800096c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000970:	429a      	cmp	r2, r3
 8000972:	f6ff af77 	blt.w	8000864 <ST7735_DrawCircle+0x88>
  }
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bd90      	pop	{r4, r7, pc}

08000980 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08d      	sub	sp, #52	; 0x34
 8000984:	af00      	add	r7, sp, #0
 8000986:	4604      	mov	r4, r0
 8000988:	4608      	mov	r0, r1
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	4623      	mov	r3, r4
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	4603      	mov	r3, r0
 8000994:	80bb      	strh	r3, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	807b      	strh	r3, [r7, #2]
 800099a:	4613      	mov	r3, r2
 800099c:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 800099e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dd0b      	ble.n	80009c2 <ST7735_FillTriangle+0x42>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80009ae:	883b      	ldrh	r3, [r7, #0]
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009b4:	803b      	strh	r3, [r7, #0]
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	843b      	strh	r3, [r7, #32]
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	8c3b      	ldrh	r3, [r7, #32]
 80009c0:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 80009c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80009c6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd0f      	ble.n	80009ee <ST7735_FillTriangle+0x6e>
  {
    SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 80009ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80009d2:	83fb      	strh	r3, [r7, #30]
 80009d4:	883b      	ldrh	r3, [r7, #0]
 80009d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80009da:	8bfb      	ldrh	r3, [r7, #30]
 80009dc:	803b      	strh	r3, [r7, #0]
 80009de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80009e2:	83bb      	strh	r3, [r7, #28]
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80009ea:	8bbb      	ldrh	r3, [r7, #28]
 80009ec:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 80009ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dd0b      	ble.n	8000a12 <ST7735_FillTriangle+0x92>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	837b      	strh	r3, [r7, #26]
 80009fe:	883b      	ldrh	r3, [r7, #0]
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	8b7b      	ldrh	r3, [r7, #26]
 8000a04:	803b      	strh	r3, [r7, #0]
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	833b      	strh	r3, [r7, #24]
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	8b3b      	ldrh	r3, [r7, #24]
 8000a10:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 8000a12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a16:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d137      	bne.n	8000a8e <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000a22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a24:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 8000a26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a2a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	da02      	bge.n	8000a38 <ST7735_FillTriangle+0xb8>
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000a36:	e007      	b.n	8000a48 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 8000a38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a3c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dd01      	ble.n	8000a48 <ST7735_FillTriangle+0xc8>
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 8000a48:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8000a4c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000a50:	429a      	cmp	r2, r3
 8000a52:	da03      	bge.n	8000a5c <ST7735_FillTriangle+0xdc>
 8000a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000a5a:	e008      	b.n	8000a6e <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8000a5c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8000a60:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dd02      	ble.n	8000a6e <ST7735_FillTriangle+0xee>
 8000a68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8000a6e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000a80:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a84:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000a88:	f000 f9c8 	bl	8000e1c <ST7735_DrawFastHLine>
    return;
 8000a8c:	e0da      	b.n	8000c44 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 8000a8e:	887a      	ldrh	r2, [r7, #2]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 8000a98:	883a      	ldrh	r2, [r7, #0]
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 8000aa2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 8000aae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 8000aba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 8000ac6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 8000ada:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ade:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d102      	bne.n	8000aec <ST7735_FillTriangle+0x16c>
 8000ae6:	883b      	ldrh	r3, [r7, #0]
 8000ae8:	853b      	strh	r3, [r7, #40]	; 0x28
 8000aea:	e003      	b.n	8000af4 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000af8:	e040      	b.n	8000b7c <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 8000afa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8000afe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8000b10:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8000b26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8000b30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b32:	8a7b      	ldrh	r3, [r7, #18]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8000b3a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8000b3e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dd05      	ble.n	8000b52 <ST7735_FillTriangle+0x1d2>
 8000b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b48:	813b      	strh	r3, [r7, #8]
 8000b4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000b4e:	893b      	ldrh	r3, [r7, #8]
 8000b50:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8000b52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000b64:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8000b68:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000b6c:	f000 f956 	bl	8000e1c <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8000b70:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3301      	adds	r3, #1
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000b7c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000b80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000b84:	429a      	cmp	r2, r3
 8000b86:	ddb8      	ble.n	8000afa <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8000b88:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	89fa      	ldrh	r2, [r7, #14]
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 8000b9e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000ba2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	8a7a      	ldrh	r2, [r7, #18]
 8000bac:	fb02 f303 	mul.w	r3, r2, r3
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 8000bb4:	e040      	b.n	8000c38 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 8000bb6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8000bba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8000bcc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000bd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 8000be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	4413      	add	r3, r2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8000bec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000bee:	8a7b      	ldrh	r3, [r7, #18]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8000bf6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8000bfa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dd05      	ble.n	8000c0e <ST7735_FillTriangle+0x28e>
 8000c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c04:	817b      	strh	r3, [r7, #10]
 8000c06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c0a:	897b      	ldrh	r3, [r7, #10]
 8000c0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8000c0e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c20:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8000c24:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000c28:	f000 f8f8 	bl	8000e1c <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8000c2c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000c38:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000c3c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000c40:	429a      	cmp	r2, r3
 8000c42:	ddb8      	ble.n	8000bb6 <ST7735_FillTriangle+0x236>
  }
}
 8000c44:	3734      	adds	r7, #52	; 0x34
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}

08000c4a <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000c4a:	b590      	push	{r4, r7, lr}
 8000c4c:	b089      	sub	sp, #36	; 0x24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4604      	mov	r4, r0
 8000c52:	4608      	mov	r0, r1
 8000c54:	4611      	mov	r1, r2
 8000c56:	461a      	mov	r2, r3
 8000c58:	4623      	mov	r3, r4
 8000c5a:	80fb      	strh	r3, [r7, #6]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	80bb      	strh	r3, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000c68:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000c6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c76:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c7a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c82:	1acb      	subs	r3, r1, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bfb8      	it	lt
 8000c88:	425b      	neglt	r3, r3
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	bfcc      	ite	gt
 8000c8e:	2301      	movgt	r3, #1
 8000c90:	2300      	movle	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	837b      	strh	r3, [r7, #26]
  if (steep)
 8000c96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <ST7735_DrawLine+0x6c>
  {
    SWAP_INT16_T(x0, y0);
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	833b      	strh	r3, [r7, #24]
 8000ca2:	88bb      	ldrh	r3, [r7, #4]
 8000ca4:	80fb      	strh	r3, [r7, #6]
 8000ca6:	8b3b      	ldrh	r3, [r7, #24]
 8000ca8:	80bb      	strh	r3, [r7, #4]
    SWAP_INT16_T(x1, y1);
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	82fb      	strh	r3, [r7, #22]
 8000cae:	883b      	ldrh	r3, [r7, #0]
 8000cb0:	807b      	strh	r3, [r7, #2]
 8000cb2:	8afb      	ldrh	r3, [r7, #22]
 8000cb4:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8000cb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dd0b      	ble.n	8000cda <ST7735_DrawLine+0x90>
  {
    SWAP_INT16_T(x0, x1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	82bb      	strh	r3, [r7, #20]
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	8abb      	ldrh	r3, [r7, #20]
 8000ccc:	807b      	strh	r3, [r7, #2]
    SWAP_INT16_T(y0, y1);
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	827b      	strh	r3, [r7, #18]
 8000cd2:	883b      	ldrh	r3, [r7, #0]
 8000cd4:	80bb      	strh	r3, [r7, #4]
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000ce4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ce8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bfb8      	it	lt
 8000cf2:	425b      	neglt	r3, r3
 8000cf4:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000cf6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cfa:	0fda      	lsrs	r2, r3, #31
 8000cfc:	4413      	add	r3, r2
 8000cfe:	105b      	asrs	r3, r3, #1
 8000d00:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8000d02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	da02      	bge.n	8000d14 <ST7735_DrawLine+0xca>
  {
    ystep = 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	83bb      	strh	r3, [r7, #28]
 8000d12:	e02d      	b.n	8000d70 <ST7735_DrawLine+0x126>
  }
  else
  {
    ystep = -1;
 8000d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d18:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8000d1a:	e029      	b.n	8000d70 <ST7735_DrawLine+0x126>
  {
    if (steep)
 8000d1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <ST7735_DrawLine+0xe8>
    {
      ST7735_DrawPixel(y0, x0, color);
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	88f9      	ldrh	r1, [r7, #6]
 8000d28:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fb90 	bl	8000450 <ST7735_DrawPixel>
 8000d30:	e005      	b.n	8000d3e <ST7735_DrawLine+0xf4>
    }
    else
    {
      ST7735_DrawPixel(x0, y0, color);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	88b9      	ldrh	r1, [r7, #4]
 8000d36:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fb89 	bl	8000450 <ST7735_DrawPixel>
    }
    err -= dy;
 8000d3e:	8bfa      	ldrh	r2, [r7, #30]
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8000d48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da09      	bge.n	8000d64 <ST7735_DrawLine+0x11a>
    {
      y0 += ystep;
 8000d50:	88ba      	ldrh	r2, [r7, #4]
 8000d52:	8bbb      	ldrh	r3, [r7, #28]
 8000d54:	4413      	add	r3, r2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000d5a:	8bfa      	ldrh	r2, [r7, #30]
 8000d5c:	8a3b      	ldrh	r3, [r7, #16]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8000d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	ddcf      	ble.n	8000d1c <ST7735_DrawLine+0xd2>
    }
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd90      	pop	{r4, r7, pc}
	...

08000d88 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <ST7735_DrawFastVLine+0x8c>)
 8000da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	da2b      	bge.n	8000e0c <ST7735_DrawFastVLine+0x84>
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <ST7735_DrawFastVLine+0x90>)
 8000db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	da24      	bge.n	8000e0c <ST7735_DrawFastVLine+0x84>
  if ((y + h - 1) >= _height) h = _height - y;
 8000dc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <ST7735_DrawFastVLine+0x90>)
 8000dce:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	dd07      	ble.n	8000de6 <ST7735_DrawFastVLine+0x5e>
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <ST7735_DrawFastVLine+0x90>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88bb      	ldrh	r3, [r7, #4]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x, y + h - 1, color);
 8000de6:	88ba      	ldrh	r2, [r7, #4]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4413      	add	r3, r2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b21c      	sxth	r4, r3
 8000df4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000df8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dfc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4623      	mov	r3, r4
 8000e06:	f7ff ff20 	bl	8000c4a <ST7735_DrawLine>
 8000e0a:	e000      	b.n	8000e0e <ST7735_DrawFastVLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 8000e0c:	bf00      	nop
}
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	20000006 	.word	0x20000006
 8000e18:	20000004 	.word	0x20000004

08000e1c <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	807b      	strh	r3, [r7, #2]
 8000e36:	4613      	mov	r3, r2
 8000e38:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <ST7735_DrawFastHLine+0x8c>)
 8000e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	da2b      	bge.n	8000ea0 <ST7735_DrawFastHLine+0x84>
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <ST7735_DrawFastHLine+0x90>)
 8000e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	da24      	bge.n	8000ea0 <ST7735_DrawFastHLine+0x84>
  if ((x + w - 1) >= _width)  w = _width - x;
 8000e56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <ST7735_DrawFastHLine+0x8c>)
 8000e62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	dd07      	ble.n	8000e7a <ST7735_DrawFastHLine+0x5e>
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <ST7735_DrawFastHLine+0x8c>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000e8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e94:	883b      	ldrh	r3, [r7, #0]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4623      	mov	r3, r4
 8000e9a:	f7ff fed6 	bl	8000c4a <ST7735_DrawLine>
 8000e9e:	e000      	b.n	8000ea2 <ST7735_DrawFastHLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 8000ea0:	bf00      	nop
}
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	20000006 	.word	0x20000006
 8000eac:	20000004 	.word	0x20000004

08000eb0 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <ST7735_SetRotation+0x13c>)
 8000ec4:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ecc:	4848      	ldr	r0, [pc, #288]	; (8000ff0 <ST7735_SetRotation+0x140>)
 8000ece:	f000 ff57 	bl	8001d80 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8000ed2:	2036      	movs	r0, #54	; 0x36
 8000ed4:	f7ff f956 	bl	8000184 <ST7735_WriteCommand>

  switch (_value_rotation)
 8000ed8:	4b44      	ldr	r3, [pc, #272]	; (8000fec <ST7735_SetRotation+0x13c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d87b      	bhi.n	8000fd8 <ST7735_SetRotation+0x128>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <ST7735_SetRotation+0x38>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f35 	.word	0x08000f35
 8000ef0:	08000f71 	.word	0x08000f71
 8000ef4:	08000f9d 	.word	0x08000f9d
  {
    case 0:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f06:	78db      	ldrb	r3, [r3, #3]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2101      	movs	r1, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f94f 	bl	80001b8 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <ST7735_SetRotation+0x148>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <ST7735_SetRotation+0x14c>)
 8000f22:	22a0      	movs	r2, #160	; 0xa0
 8000f24:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <ST7735_SetRotation+0x150>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	701a      	strb	r2, [r3, #0]
    _ystart = ST7735_YSTART;
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <ST7735_SetRotation+0x154>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    }
     break;
 8000f32:	e051      	b.n	8000fd8 <ST7735_SetRotation+0x128>
    case 1:
    {
      uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f36:	785a      	ldrb	r2, [r3, #1]
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73bb      	strb	r3, [r7, #14]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8000f4a:	f107 030e 	add.w	r3, r7, #14
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f931 	bl	80001b8 <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <ST7735_SetRotation+0x148>)
 8000f58:	22a0      	movs	r2, #160	; 0xa0
 8000f5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <ST7735_SetRotation+0x14c>)
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <ST7735_SetRotation+0x150>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <ST7735_SetRotation+0x154>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000f6e:	e033      	b.n	8000fd8 <ST7735_SetRotation+0x128>
    case 2:
    {
      uint8_t d_r = _data_rotation[3];
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	737b      	strb	r3, [r7, #13]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8000f76:	f107 030d 	add.w	r3, r7, #13
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f91b 	bl	80001b8 <ST7735_WriteData>
      _width  = ST7735_WIDTH;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <ST7735_SetRotation+0x148>)
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	801a      	strh	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <ST7735_SetRotation+0x14c>)
 8000f8a:	22a0      	movs	r2, #160	; 0xa0
 8000f8c:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_XSTART;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ST7735_SetRotation+0x150>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_YSTART;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <ST7735_SetRotation+0x154>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000f9a:	e01d      	b.n	8000fd8 <ST7735_SetRotation+0x128>
    case 3:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <ST7735_SetRotation+0x144>)
 8000faa:	78db      	ldrb	r3, [r3, #3]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	733b      	strb	r3, [r7, #12]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f8fd 	bl	80001b8 <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <ST7735_SetRotation+0x148>)
 8000fc0:	22a0      	movs	r2, #160	; 0xa0
 8000fc2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <ST7735_SetRotation+0x14c>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <ST7735_SetRotation+0x150>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <ST7735_SetRotation+0x154>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
    }
      break;
 8000fd6:	bf00      	nop
  }
  TFT_CS_H();
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <ST7735_SetRotation+0x140>)
 8000fe0:	f000 fece 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000004c 	.word	0x2000004c
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000006 	.word	0x20000006
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000008 	.word	0x20000008
 8001004:	20000009 	.word	0x20000009

08001008 <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return _height;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <ST7735_GetHeight+0x14>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000004 	.word	0x20000004

08001020 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return _width;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <ST7735_GetWidth+0x14>)
 8001026:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000006 	.word	0x20000006

08001038 <demoTFT>:


/* USER CODE BEGIN 0 */
uint8_t r = 0;
void demoTFT(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af04      	add	r7, sp, #16
ST7735_SetRotation(r);
 800103e:	4b4a      	ldr	r3, [pc, #296]	; (8001168 <demoTFT+0x130>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff34 	bl	8000eb0 <ST7735_SetRotation>
ST7735_FillScreen(ST7735_BLACK);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fb39 	bl	80006c0 <ST7735_FillScreen>

for(int x = 0; x < ST7735_GetWidth(); x++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e018      	b.n	8001086 <demoTFT+0x4e>
{
ST7735_DrawPixel(x, 0, ST7735_WHITE);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9f6 	bl	8000450 <ST7735_DrawPixel>
ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	b29c      	uxth	r4, r3
 8001068:	f7ff ffce 	bl	8001008 <ST7735_GetHeight>
 800106c:	4603      	mov	r3, r0
 800106e:	b29b      	uxth	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	4619      	mov	r1, r3
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff f9e8 	bl	8000450 <ST7735_DrawPixel>
for(int x = 0; x < ST7735_GetWidth(); x++)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	f7ff ffcb 	bl	8001020 <ST7735_GetWidth>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4293      	cmp	r3, r2
 8001092:	dbdf      	blt.n	8001054 <demoTFT+0x1c>
}

for(int y = 0; y < ST7735_GetHeight(); y++)
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e017      	b.n	80010ca <demoTFT+0x92>
{
ST7735_DrawPixel(0, y, ST7735_WHITE);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a2:	4619      	mov	r1, r3
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff f9d3 	bl	8000450 <ST7735_DrawPixel>
ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 80010aa:	f7ff ffb9 	bl	8001020 <ST7735_GetWidth>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	b291      	uxth	r1, r2
 80010ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9c6 	bl	8000450 <ST7735_DrawPixel>
for(int y = 0; y < ST7735_GetHeight(); y++)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	3301      	adds	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	f7ff ff9d 	bl	8001008 <ST7735_GetHeight>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	dbe0      	blt.n	800109a <demoTFT+0x62>
}

ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(),ST7735_WHITE);
 80010d8:	f7ff ffa2 	bl	8001020 <ST7735_GetWidth>
 80010dc:	4603      	mov	r3, r0
 80010de:	461c      	mov	r4, r3
 80010e0:	f7ff ff92 	bl	8001008 <ST7735_GetHeight>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	4622      	mov	r2, r4
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fda8 	bl	8000c4a <ST7735_DrawLine>
ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(),ST7735_WHITE);
 80010fa:	f7ff ff91 	bl	8001020 <ST7735_GetWidth>
 80010fe:	4603      	mov	r3, r0
 8001100:	461c      	mov	r4, r3
 8001102:	f7ff ff81 	bl	8001008 <ST7735_GetHeight>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fd97 	bl	8000c4a <ST7735_DrawLine>
HAL_Delay(2000);
 800111c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001120:	f000 fba2 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_BLACK);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff facb 	bl	80006c0 <ST7735_FillScreen>
for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e011      	b.n	8001154 <demoTFT+0x11c>
{
ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	b21c      	sxth	r4, r3
 8001134:	f7ff ff74 	bl	8001020 <ST7735_GetWidth>
 8001138:	4603      	mov	r3, r0
 800113a:	b29b      	uxth	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b29b      	uxth	r3, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	4621      	mov	r1, r4
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fe67 	bl	8000e1c <ST7735_DrawFastHLine>
for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	f7ff ff58 	bl	8001008 <ST7735_GetHeight>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4293      	cmp	r3, r2
 8001160:	dbe6      	blt.n	8001130 <demoTFT+0xf8>
}

for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	e013      	b.n	8001190 <demoTFT+0x158>
 8001168:	200000a8 	.word	0x200000a8
{
ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	b21c      	sxth	r4, r3
 8001170:	f7ff ff4a 	bl	8001008 <ST7735_GetHeight>
 8001174:	4603      	mov	r3, r0
 8001176:	b29b      	uxth	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	b21a      	sxth	r2, r3
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	2100      	movs	r1, #0
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fdff 	bl	8000d88 <ST7735_DrawFastVLine>
for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3304      	adds	r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	f7ff ff46 	bl	8001020 <ST7735_GetWidth>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4293      	cmp	r3, r2
 800119c:	dbe6      	blt.n	800116c <demoTFT+0x134>
}
HAL_Delay(2000);
 800119e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011a2:	f000 fb61 	bl	8001868 <HAL_Delay>

 // Check fonts
ST7735_FillScreen(ST7735_BLACK);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff fa8a 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0,"Font_7x10, red on black,ABCDEF",Font_7x10,ST7735_RED, ST7735_BLACK);
 80011ac:	4ba1      	ldr	r3, [pc, #644]	; (8001434 <demoTFT+0x3fc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	9202      	str	r2, [sp, #8]
 80011b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a9e      	ldr	r2, [pc, #632]	; (8001438 <demoTFT+0x400>)
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff f98c 	bl	80004e0 <ST7735_DrawString>
ST7735_DrawString(0, 3*10, "Font_11x18, green,ABCD",Font_11x18,ST7735_GREEN, ST7735_BLACK);
 80011c8:	4b9c      	ldr	r3, [pc, #624]	; (800143c <demoTFT+0x404>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	9202      	str	r2, [sp, #8]
 80011ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a99      	ldr	r2, [pc, #612]	; (8001440 <demoTFT+0x408>)
 80011dc:	211e      	movs	r1, #30
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff f97e 	bl	80004e0 <ST7735_DrawString>
ST7735_DrawString(0, 3*10+3*18, "Font_16x26 ,AB", Font_16x26, ST7735_BLUE,
 80011e4:	4b97      	ldr	r3, [pc, #604]	; (8001444 <demoTFT+0x40c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	9202      	str	r2, [sp, #8]
 80011ea:	221f      	movs	r2, #31
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	9200      	str	r2, [sp, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a94      	ldr	r2, [pc, #592]	; (8001448 <demoTFT+0x410>)
 80011f6:	2154      	movs	r1, #84	; 0x54
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff f971 	bl	80004e0 <ST7735_DrawString>
ST7735_BLACK);
HAL_Delay(2000);
 80011fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001202:	f000 fb31 	bl	8001868 <HAL_Delay>

 // Check colors
ST7735_FillScreen(ST7735_BLACK);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fa5a 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <demoTFT+0x404>)
 800120e:	2200      	movs	r2, #0
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a8b      	ldr	r2, [pc, #556]	; (800144c <demoTFT+0x414>)
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff f95c 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 8001228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122c:	f000 fb1c 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_BLUE);
 8001230:	201f      	movs	r0, #31
 8001232:	f7ff fa45 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 8001236:	4b81      	ldr	r3, [pc, #516]	; (800143c <demoTFT+0x404>)
 8001238:	221f      	movs	r2, #31
 800123a:	9202      	str	r2, [sp, #8]
 800123c:	2200      	movs	r2, #0
 800123e:	9201      	str	r2, [sp, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a82      	ldr	r2, [pc, #520]	; (8001450 <demoTFT+0x418>)
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff f948 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f000 fb08 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_RED);
 8001258:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800125c:	f7ff fa30 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 8001260:	4b76      	ldr	r3, [pc, #472]	; (800143c <demoTFT+0x404>)
 8001262:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001266:	9202      	str	r2, [sp, #8]
 8001268:	2200      	movs	r2, #0
 800126a:	9201      	str	r2, [sp, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	9200      	str	r2, [sp, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a78      	ldr	r2, [pc, #480]	; (8001454 <demoTFT+0x41c>)
 8001274:	2100      	movs	r1, #0
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff f932 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 800127c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001280:	f000 faf2 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_GREEN);
 8001284:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001288:	f7ff fa1a 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 800128c:	4b6b      	ldr	r3, [pc, #428]	; (800143c <demoTFT+0x404>)
 800128e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	2200      	movs	r2, #0
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	9200      	str	r2, [sp, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <demoTFT+0x420>)
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff f91c 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f000 fadc 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_CYAN);
 80012b0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80012b4:	f7ff fa04 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 80012b8:	4b60      	ldr	r3, [pc, #384]	; (800143c <demoTFT+0x404>)
 80012ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012be:	9202      	str	r2, [sp, #8]
 80012c0:	2200      	movs	r2, #0
 80012c2:	9201      	str	r2, [sp, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a64      	ldr	r2, [pc, #400]	; (800145c <demoTFT+0x424>)
 80012cc:	2100      	movs	r1, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff f906 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 80012d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d8:	f000 fac6 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_MAGENTA);
 80012dc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80012e0:	f7ff f9ee 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "MAGENTA",Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <demoTFT+0x404>)
 80012e6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	2200      	movs	r2, #0
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5a      	ldr	r2, [pc, #360]	; (8001460 <demoTFT+0x428>)
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff f8f0 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 8001300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001304:	f000 fab0 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_YELLOW);
 8001308:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800130c:	f7ff f9d8 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8001310:	4b4a      	ldr	r3, [pc, #296]	; (800143c <demoTFT+0x404>)
 8001312:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001316:	9202      	str	r2, [sp, #8]
 8001318:	2200      	movs	r2, #0
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a50      	ldr	r2, [pc, #320]	; (8001464 <demoTFT+0x42c>)
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff f8da 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001330:	f000 fa9a 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_WHITE);
 8001334:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001338:	f7ff f9c2 	bl	80006c0 <ST7735_FillScreen>
ST7735_DrawString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800133c:	4b3f      	ldr	r3, [pc, #252]	; (800143c <demoTFT+0x404>)
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	9202      	str	r2, [sp, #8]
 8001344:	2200      	movs	r2, #0
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a46      	ldr	r2, [pc, #280]	; (8001468 <demoTFT+0x430>)
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff f8c4 	bl	80004e0 <ST7735_DrawString>
HAL_Delay(500);
 8001358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135c:	f000 fa84 	bl	8001868 <HAL_Delay>

// Draw circles
ST7735_FillScreen(ST7735_BLACK);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff f9ad 	bl	80006c0 <ST7735_FillScreen>
for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	e017      	b.n	800139c <demoTFT+0x364>
{
ST7735_DrawCircle(ST7735_GetWidth()/2,ST7735_GetHeight()/2,i,ST7735_YELLOW);
 800136c:	f7ff fe58 	bl	8001020 <ST7735_GetWidth>
 8001370:	4603      	mov	r3, r0
 8001372:	0fda      	lsrs	r2, r3, #31
 8001374:	4413      	add	r3, r2
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	b21c      	sxth	r4, r3
 800137a:	f7ff fe45 	bl	8001008 <ST7735_GetHeight>
 800137e:	4603      	mov	r3, r0
 8001380:	0fda      	lsrs	r2, r3, #31
 8001382:	4413      	add	r3, r2
 8001384:	105b      	asrs	r3, r3, #1
 8001386:	b219      	sxth	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	b21a      	sxth	r2, r3
 800138c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff fa23 	bl	80007dc <ST7735_DrawCircle>
for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3302      	adds	r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	f7ff fe34 	bl	8001008 <ST7735_GetHeight>
 80013a0:	4603      	mov	r3, r0
 80013a2:	0fda      	lsrs	r2, r3, #31
 80013a4:	4413      	add	r3, r2
 80013a6:	105b      	asrs	r3, r3, #1
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	dbdc      	blt.n	800136c <demoTFT+0x334>
}
HAL_Delay(1000);
 80013b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b6:	f000 fa57 	bl	8001868 <HAL_Delay>

ST7735_FillScreen(ST7735_BLACK);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff f980 	bl	80006c0 <ST7735_FillScreen>
ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(),
 80013c0:	f7ff fe2e 	bl	8001020 <ST7735_GetWidth>
 80013c4:	4603      	mov	r3, r0
 80013c6:	0fda      	lsrs	r2, r3, #31
 80013c8:	4413      	add	r3, r2
 80013ca:	105b      	asrs	r3, r3, #1
 80013cc:	b21c      	sxth	r4, r3
 80013ce:	f7ff fe1b 	bl	8001008 <ST7735_GetHeight>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461d      	mov	r5, r3
 80013d6:	f7ff fe23 	bl	8001020 <ST7735_GetWidth>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	462b      	mov	r3, r5
 80013ec:	4622      	mov	r2, r4
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fac5 	bl	8000980 <ST7735_FillTriangle>
ST7735_GetWidth(), 0, ST7735_RED);
HAL_Delay(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fa:	f000 fa35 	bl	8001868 <HAL_Delay>

ST7735_DrawImage(0,0, 128, 90, (uint16_t*) test_img_128x128);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <demoTFT+0x434>)
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	235a      	movs	r3, #90	; 0x5a
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	2100      	movs	r1, #0
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff f975 	bl	80006f8 <ST7735_DrawImage>
HAL_Delay(3000);
 800140e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001412:	f000 fa29 	bl	8001868 <HAL_Delay>
ST7735_FillScreen(ST7735_WHITE);
 8001416:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800141a:	f7ff f951 	bl	80006c0 <ST7735_FillScreen>
r++;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <demoTFT+0x438>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <demoTFT+0x438>)
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	2000000c 	.word	0x2000000c
 8001438:	08002ab8 	.word	0x08002ab8
 800143c:	20000014 	.word	0x20000014
 8001440:	08002ad8 	.word	0x08002ad8
 8001444:	2000001c 	.word	0x2000001c
 8001448:	08002af0 	.word	0x08002af0
 800144c:	08002b00 	.word	0x08002b00
 8001450:	08002b08 	.word	0x08002b08
 8001454:	08002b10 	.word	0x08002b10
 8001458:	08002b14 	.word	0x08002b14
 800145c:	08002b1c 	.word	0x08002b1c
 8001460:	08002b24 	.word	0x08002b24
 8001464:	08002b2c 	.word	0x08002b2c
 8001468:	08002b34 	.word	0x08002b34
 800146c:	080053c8 	.word	0x080053c8
 8001470:	200000a8 	.word	0x200000a8

08001474 <main>:
/* USER CODE END 0 */

int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  HAL_Init();
 8001478:	f000 f994 	bl	80017a4 <HAL_Init>
  SystemClock_Config();
 800147c:	f000 f80b 	bl	8001496 <SystemClock_Config>
  MX_GPIO_Init();
 8001480:	f000 f87a 	bl	8001578 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001484:	f000 f842 	bl	800150c <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8001488:	f7fe ffbc 	bl	8000404 <ST7735_Init>
  ST7735_Backlight_On();
 800148c:	f7ff f99a 	bl	80007c4 <ST7735_Backlight_On>
  /* USER CODE END 2 */

  while (1)
  {
    demoTFT();
 8001490:	f7ff fdd2 	bl	8001038 <demoTFT>
 8001494:	e7fc      	b.n	8001490 <main+0x1c>

08001496 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b090      	sub	sp, #64	; 0x40
 800149a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	2228      	movs	r2, #40	; 0x28
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 faf3 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fc6f 	bl	8001db0 <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014d8:	f000 f89a 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fedd 	bl	80022b4 <HAL_RCC_ClockConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001500:	f000 f886 	bl	8001610 <Error_Handler>
  }
}
 8001504:	bf00      	nop
 8001506:	3740      	adds	r7, #64	; 0x40
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI1_Init+0x64>)
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MX_SPI1_Init+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SPI1_Init+0x64>)
 8001518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800151c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SPI1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_SPI1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_SPI1_Init+0x64>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI1_Init+0x64>)
 8001540:	2218      	movs	r2, #24
 8001542:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI1_Init+0x64>)
 8001558:	220a      	movs	r2, #10
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_SPI1_Init+0x64>)
 800155e:	f001 f805 	bl	800256c <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001568:	f000 f852 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000050 	.word	0x20000050
 8001574:	40013000 	.word	0x40013000

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_GPIO_Init+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <MX_GPIO_Init+0x90>)
 8001592:	f043 0320 	orr.w	r3, r3, #32
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_GPIO_Init+0x90>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_GPIO_Init+0x90>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <MX_GPIO_Init+0x90>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_GPIO_Init+0x90>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_GPIO_Init+0x90>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <MX_GPIO_Init+0x90>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_GPIO_Init+0x90>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015da:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_GPIO_Init+0x94>)
 80015dc:	f000 fbd0 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4619      	mov	r1, r3
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_GPIO_Init+0x94>)
 80015fa:	f000 fa3d 	bl	8001a78 <HAL_GPIO_Init>

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	40010c00 	.word	0x40010c00

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_MspInit+0x60>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_MspInit+0x60>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_SPI_MspInit+0x70>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d123      	bne.n	80016e8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_SPI_MspInit+0x74>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016d0:	23a0      	movs	r3, #160	; 0xa0
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_SPI_MspInit+0x78>)
 80016e4:	f000 f9c8 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013000 	.word	0x40013000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001742:	f000 f875 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}

0800174a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001758:	f7ff fff7 	bl	800174a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800175e:	490c      	ldr	r1, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001760:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001774:	4c09      	ldr	r4, [pc, #36]	; (800179c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f001 f961 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001786:	f7ff fe75 	bl	8001474 <main>
  bx lr
 800178a:	4770      	bx	lr
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001794:	0800b0f4 	.word	0x0800b0f4
  ldr r2, =_sbss
 8001798:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800179c:	200000b0 	.word	0x200000b0

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x28>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f92b 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	200f      	movs	r0, #15
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff ff2c 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f935 	bl	8001a5e <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f90b 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000024 	.word	0x20000024
 8001828:	2000002c 	.word	0x2000002c
 800182c:	20000028 	.word	0x20000028

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_IncTick+0x20>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	2000002c 	.word	0x2000002c
 8001850:	200000ac 	.word	0x200000ac

08001854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_GetTick+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	200000ac 	.word	0x200000ac

08001868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fff0 	bl	8001854 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001880:	d005      	beq.n	800188e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_Delay+0x44>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188e:	bf00      	nop
 8001890:	f7ff ffe0 	bl	8001854 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d8f7      	bhi.n	8001890 <HAL_Delay+0x28>
  {
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000002c 	.word	0x2000002c

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff90 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff49 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e169      	b.n	8001d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8158 	bne.w	8001d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4a9a      	ldr	r2, [pc, #616]	; (8001d18 <HAL_GPIO_Init+0x2a0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a98      	ldr	r2, [pc, #608]	; (8001d18 <HAL_GPIO_Init+0x2a0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d875      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aba:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_GPIO_Init+0x2a4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d058      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a96      	ldr	r2, [pc, #600]	; (8001d1c <HAL_GPIO_Init+0x2a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d86f      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a96      	ldr	r2, [pc, #600]	; (8001d20 <HAL_GPIO_Init+0x2a8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d052      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001acc:	4a94      	ldr	r2, [pc, #592]	; (8001d20 <HAL_GPIO_Init+0x2a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d869      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a94      	ldr	r2, [pc, #592]	; (8001d24 <HAL_GPIO_Init+0x2ac>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04c      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a92      	ldr	r2, [pc, #584]	; (8001d24 <HAL_GPIO_Init+0x2ac>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d863      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ade:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <HAL_GPIO_Init+0x2b0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a90      	ldr	r2, [pc, #576]	; (8001d28 <HAL_GPIO_Init+0x2b0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d85d      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d82a      	bhi.n	8001b44 <HAL_GPIO_Init+0xcc>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d859      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_GPIO_Init+0x80>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b4d 	.word	0x08001b4d
 8001b00:	08001b5f 	.word	0x08001b5f
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba7 	.word	0x08001ba7
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b69 	.word	0x08001b69
 8001b44:	4a79      	ldr	r2, [pc, #484]	; (8001d2c <HAL_GPIO_Init+0x2b4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4a:	e02c      	b.n	8001ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e029      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e024      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e01f      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e01a      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e013      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	611a      	str	r2, [r3, #16]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
          break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          break;
 8001ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d801      	bhi.n	8001bb2 <HAL_GPIO_Init+0x13a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x13e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_GPIO_Init+0x14c>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x152>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3b08      	subs	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80b1 	beq.w	8001d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_GPIO_Init+0x2b8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c10:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2bc>)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <HAL_GPIO_Init+0x2c0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_GPIO_Init+0x1ec>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3f      	ldr	r2, [pc, #252]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1e8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1e4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e004      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_Init+0x1ee>
 8001c64:	2300      	movs	r3, #0
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c76:	492f      	ldr	r1, [pc, #188]	; (8001d34 <HAL_GPIO_Init+0x2bc>)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	492c      	ldr	r1, [pc, #176]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4928      	ldr	r1, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60cb      	str	r3, [r1, #12]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	491e      	ldr	r1, [pc, #120]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4918      	ldr	r1, [pc, #96]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4914      	ldr	r1, [pc, #80]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e021      	b.n	8001d5a <HAL_GPIO_Init+0x2e2>
 8001d16:	bf00      	nop
 8001d18:	10320000 	.word	0x10320000
 8001d1c:	10310000 	.word	0x10310000
 8001d20:	10220000 	.word	0x10220000
 8001d24:	10210000 	.word	0x10210000
 8001d28:	10120000 	.word	0x10120000
 8001d2c:	10110000 	.word	0x10110000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40011400 	.word	0x40011400
 8001d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	4909      	ldr	r1, [pc, #36]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f47f ae8e 	bne.w	8001a8c <HAL_GPIO_Init+0x14>
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	372c      	adds	r7, #44	; 0x2c
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e272      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4b8f      	ldr	r3, [pc, #572]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06c      	beq.n	8001edc <HAL_RCC_OscConfig+0x12c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d168      	bne.n	8001edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e24c      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76>
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7f      	ldr	r2, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e02e      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b78      	ldr	r3, [pc, #480]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a77      	ldr	r2, [pc, #476]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xbc>
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a71      	ldr	r2, [pc, #452]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	4b6b      	ldr	r3, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fce2 	bl	8001854 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fcde 	bl	8001854 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e200      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xe4>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fcce 	bl	8001854 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fcca 	bl	8001854 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1ec      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x10c>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1c0      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4939      	ldr	r1, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	e03a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fc83 	bl	8001854 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f52:	f7ff fc7f 	bl	8001854 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1a1      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc62 	bl	8001854 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff fc5e 	bl	8001854 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e180      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03a      	beq.n	8002034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fc42 	bl	8001854 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fc3e 	bl	8001854 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e160      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 fa9c 	bl	8002530 <RCC_Delay>
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff fc28 	bl	8001854 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fc24 	bl	8001854 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d908      	bls.n	8002028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e146      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	42420000 	.word	0x42420000
 8002024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e9      	bne.n	8002008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a6 	beq.w	800218e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a87      	ldr	r2, [pc, #540]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7e      	ldr	r2, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff fbe5 	bl	8001854 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff fbe1 	bl	8001854 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e103      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b75      	ldr	r3, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x312>
 80020b4:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e02d      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x334>
 80020ca:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a66      	ldr	r2, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	e01c      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x356>
 80020ec:	4b61      	ldr	r3, [pc, #388]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a60      	ldr	r2, [pc, #384]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4b5e      	ldr	r3, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fb95 	bl	8001854 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff fb91 	bl	8001854 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0b1      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCC_OscConfig+0x37e>
 8002150:	e014      	b.n	800217c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb7f 	bl	8001854 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff fb7b 	bl	8001854 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e09b      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d061      	beq.n	8002268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d146      	bne.n	800223a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb4f 	bl	8001854 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff fb4b 	bl	8001854 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e06d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4921      	ldr	r1, [pc, #132]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a19      	ldr	r1, [r3, #32]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	430b      	orrs	r3, r1
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fb1f 	bl	8001854 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fb1b 	bl	8001854 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e03d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x46a>
 8002238:	e035      	b.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fb08 	bl	8001854 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fb04 	bl	8001854 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e026      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x498>
 8002266:	e01e      	b.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e019      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x500>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d0      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4965      	ldr	r1, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d115      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e073      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4936      	ldr	r1, [pc, #216]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fa56 	bl	8001854 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7ff fa52 	bl	8001854 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e053      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d210      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1cc>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f9b4 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	0800b0c8 	.word	0x0800b0c8
 8002480:	20000024 	.word	0x20000024
 8002484:	20000028 	.word	0x20000028

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x30>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x36>
 80024b6:	e027      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ba:	613b      	str	r3, [r7, #16]
      break;
 80024bc:	e027      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0c9b      	lsrs	r3, r3, #18
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0c5b      	lsrs	r3, r3, #17
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ea:	fb03 f202 	mul.w	r2, r3, r2
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e004      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_RCC_GetSysClockFreq+0xa4>)
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	613b      	str	r3, [r7, #16]
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	693b      	ldr	r3, [r7, #16]
}
 8002510:	4618      	mov	r0, r3
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	0800b0d8 	.word	0x0800b0d8
 8002528:	0800b0e8 	.word	0x0800b0e8
 800252c:	003d0900 	.word	0x003d0900

08002530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <RCC_Delay+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <RCC_Delay+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800254c:	bf00      	nop
  }
  while (Delay --);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <RCC_Delay+0x1c>
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000024 	.word	0x20000024
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e076      	b.n	800266c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258e:	d009      	beq.n	80025a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	e005      	b.n	80025a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff f85e 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	ea42 0103 	orr.w	r1, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0c1a      	lsrs	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f002 0204 	and.w	r2, r2, #4
 800264a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Transmit+0x22>
 8002692:	2302      	movs	r3, #2
 8002694:	e12d      	b.n	80028f2 <HAL_SPI_Transmit+0x27e>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269e:	f7ff f8d9 	bl	8001854 <HAL_GetTick>
 80026a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d002      	beq.n	80026ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026b8:	e116      	b.n	80028e8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_SPI_Transmit+0x52>
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026ca:	e10d      	b.n	80028e8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002712:	d10f      	bne.n	8002734 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d007      	beq.n	8002752 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800275a:	d14f      	bne.n	80027fc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_SPI_Transmit+0xf6>
 8002764:	8afb      	ldrh	r3, [r7, #22]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d142      	bne.n	80027f0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	1c9a      	adds	r2, r3, #2
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800278e:	e02f      	b.n	80027f0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d112      	bne.n	80027c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80027c2:	e015      	b.n	80027f0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c4:	f7ff f846 	bl	8001854 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d803      	bhi.n	80027dc <HAL_SPI_Transmit+0x168>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Transmit+0x16e>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027ee:	e07b      	b.n	80028e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ca      	bne.n	8002790 <HAL_SPI_Transmit+0x11c>
 80027fa:	e050      	b.n	800289e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_Transmit+0x196>
 8002804:	8afb      	ldrh	r3, [r7, #22]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d144      	bne.n	8002894 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002830:	e030      	b.n	8002894 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d113      	bne.n	8002868 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	; 0x36
 8002866:	e015      	b.n	8002894 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002868:	f7fe fff4 	bl	8001854 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d803      	bhi.n	8002880 <HAL_SPI_Transmit+0x20c>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d102      	bne.n	8002886 <HAL_SPI_Transmit+0x212>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002892:	e029      	b.n	80028e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1c9      	bne.n	8002832 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	6839      	ldr	r1, [r7, #0]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8b2 	bl	8002a0c <SPI_EndRxTxTransaction>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e003      	b.n	80028e8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800290c:	f7fe ffa2 	bl	8001854 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800291c:	f7fe ff9a 	bl	8001854 <HAL_GetTick>
 8002920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	0d1b      	lsrs	r3, r3, #20
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002932:	e054      	b.n	80029de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d050      	beq.n	80029de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800293c:	f7fe ff8a 	bl	8001854 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	429a      	cmp	r2, r3
 800294a:	d902      	bls.n	8002952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13d      	bne.n	80029ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296a:	d111      	bne.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002974:	d004      	beq.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d107      	bne.n	8002990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002998:	d10f      	bne.n	80029ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e017      	b.n	80029fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3b01      	subs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d19b      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000024 	.word	0x20000024

08002a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff6a 	bl	80028fc <SPI_WaitFlagStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4d0c      	ldr	r5, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 f822 	bl	8002aa0 <_init>
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	4d0a      	ldr	r5, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	0800b0ec 	.word	0x0800b0ec
 8002a84:	0800b0ec 	.word	0x0800b0ec
 8002a88:	0800b0ec 	.word	0x0800b0ec
 8002a8c:	0800b0f0 	.word	0x0800b0f0

08002a90 <memset>:
 8002a90:	4603      	mov	r3, r0
 8002a92:	4402      	add	r2, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
