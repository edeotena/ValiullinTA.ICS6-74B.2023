
SchulteTable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800514c  0800514c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800514c  0800514c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800514c  0800514c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200000bc  08005210  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005210  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3a6  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002250  00000000  00000000  0002c48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019102  00000000  00000000  0002fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc01  00000000  00000000  00048dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008856f  00000000  00000000  000569cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000def3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000def8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004710 	.word	0x08004710

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08004710 	.word	0x08004710

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ST7735_Reset>:
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);
static void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color);
static void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color);

static void ST7735_Reset()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8000160:	2200      	movs	r2, #0
 8000162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000166:	4807      	ldr	r0, [pc, #28]	; (8000184 <ST7735_Reset+0x28>)
 8000168:	f001 fd71 	bl	8001c4e <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800016c:	2014      	movs	r0, #20
 800016e:	f001 facb 	bl	8001708 <HAL_Delay>
  TFT_RES_H();
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000178:	4802      	ldr	r0, [pc, #8]	; (8000184 <ST7735_Reset+0x28>)
 800017a:	f001 fd68 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000198:	4806      	ldr	r0, [pc, #24]	; (80001b4 <ST7735_WriteCommand+0x2c>)
 800019a:	f001 fd58 	bl	8001c4e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	f04f 33ff 	mov.w	r3, #4294967295
 80001a4:	2201      	movs	r2, #1
 80001a6:	4804      	ldr	r0, [pc, #16]	; (80001b8 <ST7735_WriteCommand+0x30>)
 80001a8:	f002 fc7f 	bl	8002aaa <HAL_SPI_Transmit>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	40010c00 	.word	0x40010c00
 80001b8:	200000f0 	.word	0x200000f0

080001bc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	4807      	ldr	r0, [pc, #28]	; (80001ec <ST7735_WriteData+0x30>)
 80001ce:	f001 fd3e 	bl	8001c4e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	f04f 33ff 	mov.w	r3, #4294967295
 80001da:	6879      	ldr	r1, [r7, #4]
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <ST7735_WriteData+0x34>)
 80001de:	f002 fc64 	bl	8002aaa <HAL_SPI_Transmit>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	200000f0 	.word	0x200000f0

080001f4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1c5a      	adds	r2, r3, #1
 8000200:	607a      	str	r2, [r7, #4]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000206:	e034      	b.n	8000272 <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	1c5a      	adds	r2, r3, #1
 800020c:	607a      	str	r2, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000212:	7afb      	ldrb	r3, [r7, #11]
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ffb7 	bl	8000188 <ST7735_WriteCommand>

        numArgs = *addr++;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	1c5a      	adds	r2, r3, #1
 800021e:	607a      	str	r2, [r7, #4]
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000224:	7abb      	ldrb	r3, [r7, #10]
 8000226:	b29b      	uxth	r3, r3
 8000228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800022c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800022e:	7abb      	ldrb	r3, [r7, #10]
 8000230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000234:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000236:	7abb      	ldrb	r3, [r7, #10]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d008      	beq.n	800024e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	4619      	mov	r1, r3
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffbb 	bl	80001bc <ST7735_WriteData>
            addr += numArgs;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 800024e:	89bb      	ldrh	r3, [r7, #12]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d00e      	beq.n	8000272 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	607a      	str	r2, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800025e:	89bb      	ldrh	r3, [r7, #12]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d102      	bne.n	800026a <ST7735_ExecuteCommandList+0x76>
 8000264:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000268:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800026a:	89bb      	ldrh	r3, [r7, #12]
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fa4b 	bl	8001708 <HAL_Delay>
    while(numCommands--)
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	73fa      	strb	r2, [r7, #15]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d1c5      	bne.n	8000208 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4604      	mov	r4, r0
 8000290:	4608      	mov	r0, r1
 8000292:	4611      	mov	r1, r2
 8000294:	461a      	mov	r2, r3
 8000296:	4623      	mov	r3, r4
 8000298:	71fb      	strb	r3, [r7, #7]
 800029a:	4603      	mov	r3, r0
 800029c:	71bb      	strb	r3, [r7, #6]
 800029e:	460b      	mov	r3, r1
 80002a0:	717b      	strb	r3, [r7, #5]
 80002a2:	4613      	mov	r3, r2
 80002a4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002a6:	202a      	movs	r0, #42	; 0x2a
 80002a8:	f7ff ff6e 	bl	8000188 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80002ac:	2300      	movs	r3, #0
 80002ae:	733b      	strb	r3, [r7, #12]
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <ST7735_SetAddressWindow+0x88>)
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4413      	add	r3, r2
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	737b      	strb	r3, [r7, #13]
 80002bc:	2300      	movs	r3, #0
 80002be:	73bb      	strb	r3, [r7, #14]
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <ST7735_SetAddressWindow+0x88>)
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	797b      	ldrb	r3, [r7, #5]
 80002c6:	4413      	add	r3, r2
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	2104      	movs	r1, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff72 	bl	80001bc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002d8:	202b      	movs	r0, #43	; 0x2b
 80002da:	f7ff ff55 	bl	8000188 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <ST7735_SetAddressWindow+0x8c>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	4413      	add	r3, r2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <ST7735_SetAddressWindow+0x8c>)
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	2104      	movs	r1, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff5d 	bl	80001bc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000302:	202c      	movs	r0, #44	; 0x2c
 8000304:	f7ff ff40 	bl	8000188 <ST7735_WriteCommand>
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	bd90      	pop	{r4, r7, pc}
 8000310:	20000004 	.word	0x20000004
 8000314:	20000005 	.word	0x20000005

08000318 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000318:	b082      	sub	sp, #8
 800031a:	b590      	push	{r4, r7, lr}
 800031c:	b089      	sub	sp, #36	; 0x24
 800031e:	af00      	add	r7, sp, #0
 8000320:	637b      	str	r3, [r7, #52]	; 0x34
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
 8000326:	460b      	mov	r3, r1
 8000328:	80bb      	strh	r3, [r7, #4]
 800032a:	4613      	mov	r3, r2
 800032c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	b2d8      	uxtb	r0, r3
 8000332:	88bb      	ldrh	r3, [r7, #4]
 8000334:	b2d9      	uxtb	r1, r3
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800033e:	4413      	add	r3, r2
 8000340:	b2db      	uxtb	r3, r3
 8000342:	3b01      	subs	r3, #1
 8000344:	b2dc      	uxtb	r4, r3
 8000346:	88bb      	ldrh	r3, [r7, #4]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800034e:	4413      	add	r3, r2
 8000350:	b2db      	uxtb	r3, r3
 8000352:	3b01      	subs	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4622      	mov	r2, r4
 8000358:	f7ff ff96 	bl	8000288 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
 8000360:	e043      	b.n	80003ea <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	3b20      	subs	r3, #32
 8000368:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800036c:	fb01 f303 	mul.w	r3, r1, r3
 8000370:	4619      	mov	r1, r3
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	440b      	add	r3, r1
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e029      	b.n	80003d8 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000390:	2b00      	cmp	r3, #0
 8000392:	d00e      	beq.n	80003b2 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000394:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000396:	0a1b      	lsrs	r3, r3, #8
 8000398:	b29b      	uxth	r3, r3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	743b      	strb	r3, [r7, #16]
 800039e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff06 	bl	80001bc <ST7735_WriteData>
 80003b0:	e00f      	b.n	80003d2 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003b6:	0a1b      	lsrs	r3, r3, #8
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	733b      	strb	r3, [r7, #12]
 80003be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2102      	movs	r1, #2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fef5 	bl	80001bc <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	3301      	adds	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
 80003d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003dc:	461a      	mov	r2, r3
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d3cf      	bcc.n	8000384 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 80003e4:	69fb      	ldr	r3, [r7, #28]
 80003e6:	3301      	adds	r3, #1
 80003e8:	61fb      	str	r3, [r7, #28]
 80003ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003ee:	461a      	mov	r2, r3
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d3b5      	bcc.n	8000362 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3724      	adds	r7, #36	; 0x24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000402:	b002      	add	sp, #8
 8000404:	4770      	bx	lr
	...

08000408 <ST7735_Init>:

void ST7735_Init()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	TFT_CS_L();
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	4808      	ldr	r0, [pc, #32]	; (8000434 <ST7735_Init+0x2c>)
 8000414:	f001 fc1b 	bl	8001c4e <HAL_GPIO_WritePin>
    ST7735_Reset();
 8000418:	f7ff fea0 	bl	800015c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800041c:	4806      	ldr	r0, [pc, #24]	; (8000438 <ST7735_Init+0x30>)
 800041e:	f7ff fee9 	bl	80001f4 <ST7735_ExecuteCommandList>
    //ST7735_ExecuteCommandList(init_cmds2);
    //ST7735_ExecuteCommandList(init_cmds3);
    TFT_CS_H();
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <ST7735_Init+0x2c>)
 800042a:	f001 fc10 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010c00 	.word	0x40010c00
 8000438:	0800481c 	.word	0x0800481c

0800043c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
 8000446:	460b      	mov	r3, r1
 8000448:	80bb      	strh	r3, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <ST7735_DrawPixel+0x84>)
 8000452:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000456:	4293      	cmp	r3, r2
 8000458:	da2e      	bge.n	80004b8 <ST7735_DrawPixel+0x7c>
 800045a:	88bb      	ldrh	r3, [r7, #4]
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <ST7735_DrawPixel+0x88>)
 800045e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000462:	4293      	cmp	r3, r2
 8000464:	da28      	bge.n	80004b8 <ST7735_DrawPixel+0x7c>
        return;

    TFT_CS_L();
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046c:	4816      	ldr	r0, [pc, #88]	; (80004c8 <ST7735_DrawPixel+0x8c>)
 800046e:	f001 fbee 	bl	8001c4e <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	b2d8      	uxtb	r0, r3
 8000476:	88bb      	ldrh	r3, [r7, #4]
 8000478:	b2d9      	uxtb	r1, r3
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	3301      	adds	r3, #1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	88bb      	ldrh	r3, [r7, #4]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	3301      	adds	r3, #1
 8000488:	b2db      	uxtb	r3, r3
 800048a:	f7ff fefd 	bl	8000288 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800048e:	887b      	ldrh	r3, [r7, #2]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29b      	uxth	r3, r3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	733b      	strb	r3, [r7, #12]
 8000498:	887b      	ldrh	r3, [r7, #2]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	2102      	movs	r1, #2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fe89 	bl	80001bc <ST7735_WriteData>

    TFT_CS_H();
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <ST7735_DrawPixel+0x8c>)
 80004b2:	f001 fbcc 	bl	8001c4e <HAL_GPIO_WritePin>
 80004b6:	e000      	b.n	80004ba <ST7735_DrawPixel+0x7e>
        return;
 80004b8:	bf00      	nop
}
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000002 	.word	0x20000002
 80004c4:	20000000 	.word	0x20000000
 80004c8:	40010c00 	.word	0x40010c00

080004cc <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80004cc:	b082      	sub	sp, #8
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af04      	add	r7, sp, #16
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	4603      	mov	r3, r0
 80004da:	80fb      	strh	r3, [r7, #6]
 80004dc:	460b      	mov	r3, r1
 80004de:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e6:	4814      	ldr	r0, [pc, #80]	; (8000538 <ST7735_DrawString+0x6c>)
 80004e8:	f001 fbb1 	bl	8001c4e <HAL_GPIO_WritePin>

    while(*str)
 80004ec:	e013      	b.n	8000516 <ST7735_DrawString+0x4a>
    {
        ST7735_WriteChar(x, y, *str++, font, color, bgcolor);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	603a      	str	r2, [r7, #0]
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	88b9      	ldrh	r1, [r7, #4]
 80004f8:	88f8      	ldrh	r0, [r7, #6]
 80004fa:	8c3b      	ldrh	r3, [r7, #32]
 80004fc:	9302      	str	r3, [sp, #8]
 80004fe:	8bbb      	ldrh	r3, [r7, #28]
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	f7ff ff06 	bl	8000318 <ST7735_WriteChar>
        x += font.width;
 800050c:	7d3b      	ldrb	r3, [r7, #20]
 800050e:	b29a      	uxth	r2, r3
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	4413      	add	r3, r2
 8000514:	80fb      	strh	r3, [r7, #6]
    while(*str)
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1e7      	bne.n	80004ee <ST7735_DrawString+0x22>
    }

    TFT_CS_H();
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <ST7735_DrawString+0x6c>)
 8000526:	f001 fb92 	bl	8001c4e <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000534:	b002      	add	sp, #8
 8000536:	4770      	bx	lr
 8000538:	40010c00 	.word	0x40010c00

0800053c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	80fb      	strh	r3, [r7, #6]
 800054e:	4603      	mov	r3, r0
 8000550:	80bb      	strh	r3, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	807b      	strh	r3, [r7, #2]
 8000556:	4613      	mov	r3, r2
 8000558:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	4a3b      	ldr	r2, [pc, #236]	; (800064c <ST7735_FillRectangle+0x110>)
 800055e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000562:	4293      	cmp	r3, r2
 8000564:	da6d      	bge.n	8000642 <ST7735_FillRectangle+0x106>
 8000566:	88bb      	ldrh	r3, [r7, #4]
 8000568:	4a39      	ldr	r2, [pc, #228]	; (8000650 <ST7735_FillRectangle+0x114>)
 800056a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800056e:	4293      	cmp	r3, r2
 8000570:	da67      	bge.n	8000642 <ST7735_FillRectangle+0x106>
    if((x + w - 1) >= _width) w = _width - x;
 8000572:	88fa      	ldrh	r2, [r7, #6]
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	4413      	add	r3, r2
 8000578:	4a34      	ldr	r2, [pc, #208]	; (800064c <ST7735_FillRectangle+0x110>)
 800057a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800057e:	4293      	cmp	r3, r2
 8000580:	dd06      	ble.n	8000590 <ST7735_FillRectangle+0x54>
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <ST7735_FillRectangle+0x110>)
 8000584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000588:	b29a      	uxth	r2, r3
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000590:	88ba      	ldrh	r2, [r7, #4]
 8000592:	883b      	ldrh	r3, [r7, #0]
 8000594:	4413      	add	r3, r2
 8000596:	4a2e      	ldr	r2, [pc, #184]	; (8000650 <ST7735_FillRectangle+0x114>)
 8000598:	f9b2 2000 	ldrsh.w	r2, [r2]
 800059c:	4293      	cmp	r3, r2
 800059e:	dd06      	ble.n	80005ae <ST7735_FillRectangle+0x72>
 80005a0:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <ST7735_FillRectangle+0x114>)
 80005a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	88bb      	ldrh	r3, [r7, #4]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4827      	ldr	r0, [pc, #156]	; (8000654 <ST7735_FillRectangle+0x118>)
 80005b6:	f001 fb4a 	bl	8001c4e <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	b2d8      	uxtb	r0, r3
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	887b      	ldrh	r3, [r7, #2]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4413      	add	r3, r2
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b2dc      	uxtb	r4, r3
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4413      	add	r3, r2
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	3b01      	subs	r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4622      	mov	r2, r4
 80005e4:	f7ff fe50 	bl	8000288 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005e8:	8c3b      	ldrh	r3, [r7, #32]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	733b      	strb	r3, [r7, #12]
 80005f2:	8c3b      	ldrh	r3, [r7, #32]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <ST7735_FillRectangle+0x118>)
 8000600:	f001 fb25 	bl	8001c4e <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000604:	883b      	ldrh	r3, [r7, #0]
 8000606:	80bb      	strh	r3, [r7, #4]
 8000608:	e011      	b.n	800062e <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	e008      	b.n	8000622 <ST7735_FillRectangle+0xe6>
        {
          ST7735_WriteData(data, sizeof(data));
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fdd0 	bl	80001bc <ST7735_WriteData>
        for(x = w; x > 0; x--)
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	3b01      	subs	r3, #1
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f3      	bne.n	8000610 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8000628:	88bb      	ldrh	r3, [r7, #4]
 800062a:	3b01      	subs	r3, #1
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1ea      	bne.n	800060a <ST7735_FillRectangle+0xce>
        }
    }
    TFT_CS_H();
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <ST7735_FillRectangle+0x118>)
 800063c:	f001 fb07 	bl	8001c4e <HAL_GPIO_WritePin>
 8000640:	e000      	b.n	8000644 <ST7735_FillRectangle+0x108>
    if((x >= _width) || (y >= _height)) return;
 8000642:	bf00      	nop
}
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	bf00      	nop
 800064c:	20000002 	.word	0x20000002
 8000650:	20000000 	.word	0x20000000
 8000654:	40010c00 	.word	0x40010c00

08000658 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <ST7735_FillScreen+0x30>)
 8000664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <ST7735_FillScreen+0x34>)
 800066c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000670:	b299      	uxth	r1, r3
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	460b      	mov	r3, r1
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff5e 	bl	800053c <ST7735_FillRectangle>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000002 	.word	0x20000002
 800068c:	20000000 	.word	0x20000000

08000690 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	4603      	mov	r3, r0
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
 80006aa:	4613      	mov	r3, r2
 80006ac:	803b      	strh	r3, [r7, #0]
	for (int i = x0; i < x1; ++i) {
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e009      	b.n	80006ca <ST7735_DrawLine+0x3a>
		ST7735_DrawPixel(i, y0, color);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	88b9      	ldrh	r1, [r7, #4]
 80006bc:	8c3a      	ldrh	r2, [r7, #32]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff febc 	bl	800043c <ST7735_DrawPixel>
	for (int i = x0; i < x1; ++i) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf0      	blt.n	80006b6 <ST7735_DrawLine+0x26>
	}

	for (int i = y0; i < y1; ++i) {
 80006d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	e009      	b.n	80006f0 <ST7735_DrawLine+0x60>
		ST7735_DrawPixel(x0, i, color);
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	b291      	uxth	r1, r2
 80006e2:	8c3a      	ldrh	r2, [r7, #32]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fea9 	bl	800043c <ST7735_DrawPixel>
	for (int i = y0; i < y1; ++i) {
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dbf0      	blt.n	80006dc <ST7735_DrawLine+0x4c>
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <show_table>:
static void is_best_time(int time);

/* Main functions */

void show_table(int bcolor, int fcolor)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b093      	sub	sp, #76	; 0x4c
 8000708:	af04      	add	r7, sp, #16
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	state = TABLE_SHOWING;
 800070e:	4b83      	ldr	r3, [pc, #524]	; (800091c <show_table+0x218>)
 8000710:	2202      	movs	r2, #2
 8000712:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(bcolor);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	b29b      	uxth	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff9d 	bl	8000658 <ST7735_FillScreen>

	for (int i = 0; i < schulte_table.size; ++i) {
 800071e:	2300      	movs	r3, #0
 8000720:	637b      	str	r3, [r7, #52]	; 0x34
 8000722:	e079      	b.n	8000818 <show_table+0x114>
		char format_string[20];
		for (int j = 0; j < schulte_table.size; ++j) {
 8000724:	2300      	movs	r3, #0
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
 8000728:	e04a      	b.n	80007c0 <show_table+0xbc>
			format_string[j * 3] = schulte_table.data[i][j] / 10 + '0';
 800072a:	497d      	ldr	r1, [pc, #500]	; (8000920 <show_table+0x21c>)
 800072c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a79      	ldr	r2, [pc, #484]	; (8000924 <show_table+0x220>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1092      	asrs	r2, r2, #2
 8000746:	17db      	asrs	r3, r3, #31
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b2d9      	uxtb	r1, r3
 800074c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	3338      	adds	r3, #56	; 0x38
 800075c:	443b      	add	r3, r7
 800075e:	f803 2c2c 	strb.w	r2, [r3, #-44]
			format_string[j * 3 + 1] = schulte_table.data[i][j] % 10 + '0';
 8000762:	496f      	ldr	r1, [pc, #444]	; (8000920 <show_table+0x21c>)
 8000764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800076e:	4413      	add	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	4b6b      	ldr	r3, [pc, #428]	; (8000924 <show_table+0x220>)
 8000778:	fb83 1302 	smull	r1, r3, r3, r2
 800077c:	1099      	asrs	r1, r3, #2
 800077e:	17d3      	asrs	r3, r2, #31
 8000780:	1ac9      	subs	r1, r1, r3
 8000782:	460b      	mov	r3, r1
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	1ad1      	subs	r1, r2, r3
 800078c:	b2c9      	uxtb	r1, r1
 800078e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	3301      	adds	r3, #1
 8000798:	f101 0230 	add.w	r2, r1, #48	; 0x30
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	3338      	adds	r3, #56	; 0x38
 80007a0:	443b      	add	r3, r7
 80007a2:	f803 2c2c 	strb.w	r2, [r3, #-44]
			format_string[j * 3 + 2] = ' ';
 80007a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	3302      	adds	r3, #2
 80007b0:	3338      	adds	r3, #56	; 0x38
 80007b2:	443b      	add	r3, r7
 80007b4:	2220      	movs	r2, #32
 80007b6:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int j = 0; j < schulte_table.size; ++j) {
 80007ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007bc:	3301      	adds	r3, #1
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <show_table+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbaf      	blt.n	800072a <show_table+0x26>
		}
		format_string[schulte_table.size * 3 - 1] = '\0';
 80007ca:	4b55      	ldr	r3, [pc, #340]	; (8000920 <show_table+0x21c>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	3b01      	subs	r3, #1
 80007d6:	3338      	adds	r3, #56	; 0x38
 80007d8:	443b      	add	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	f803 2c2c 	strb.w	r2, [r3, #-44]
		ST7735_DrawString(3, 3 + i * 15, format_string, Font_7x10, fcolor, bcolor);
 80007e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	3303      	adds	r3, #3
 80007ee:	b298      	uxth	r0, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b299      	uxth	r1, r3
 80007f8:	4b4b      	ldr	r3, [pc, #300]	; (8000928 <show_table+0x224>)
 80007fa:	f107 040c 	add.w	r4, r7, #12
 80007fe:	9102      	str	r1, [sp, #8]
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	9200      	str	r2, [sp, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4622      	mov	r2, r4
 800080a:	4601      	mov	r1, r0
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff fe5d 	bl	80004cc <ST7735_DrawString>
	for (int i = 0; i < schulte_table.size; ++i) {
 8000812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000814:	3301      	adds	r3, #1
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	4b41      	ldr	r3, [pc, #260]	; (8000920 <show_table+0x21c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800081e:	429a      	cmp	r2, r3
 8000820:	db80      	blt.n	8000724 <show_table+0x20>
	}

	for(int i = 1; i < schulte_table.size; ++i) {
 8000822:	2301      	movs	r3, #1
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000826:	e044      	b.n	80008b2 <show_table+0x1ae>
		ST7735_DrawLine(i * 18, 0, i * 18, schulte_table.size * 14 + 4, fcolor);
 8000828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082a:	b29b      	uxth	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	b218      	sxth	r0, r3
 8000838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083a:	b29b      	uxth	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	00d2      	lsls	r2, r2, #3
 8000840:	4413      	add	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	b29b      	uxth	r3, r3
 8000846:	b21a      	sxth	r2, r3
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <show_table+0x21c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	00c9      	lsls	r1, r1, #3
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	3304      	adds	r3, #4
 800085a:	b29b      	uxth	r3, r3
 800085c:	b219      	sxth	r1, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b29b      	uxth	r3, r3
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	460b      	mov	r3, r1
 8000866:	2100      	movs	r1, #0
 8000868:	f7ff ff12 	bl	8000690 <ST7735_DrawLine>
		ST7735_DrawLine(0, i * 15, 18 * schulte_table.size + 2, i * 15, fcolor);
 800086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b29b      	uxth	r3, r3
 8000878:	b219      	sxth	r1, r3
 800087a:	4b29      	ldr	r3, [pc, #164]	; (8000920 <show_table+0x21c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	b29b      	uxth	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	3302      	adds	r3, #2
 800088c:	b29b      	uxth	r3, r3
 800088e:	b21a      	sxth	r2, r3
 8000890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000892:	b29b      	uxth	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	0100      	lsls	r0, r0, #4
 8000898:	1ac3      	subs	r3, r0, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	b218      	sxth	r0, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4603      	mov	r3, r0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fef2 	bl	8000690 <ST7735_DrawLine>
	for(int i = 1; i < schulte_table.size; ++i) {
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	3301      	adds	r3, #1
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <show_table+0x21c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbb5      	blt.n	8000828 <show_table+0x124>
	}

	char format_string[] = "Size: _x_";
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <show_table+0x228>)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c4:	c303      	stmia	r3!, {r0, r1}
 80008c6:	801a      	strh	r2, [r3, #0]
	format_string[6] = format_string[8] =  schulte_table.size + '0';
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <show_table+0x21c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3330      	adds	r3, #48	; 0x30
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80008d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ST7735_DrawString(3, 3 + (schulte_table.size + 1) * 15, format_string, Font_7x10, fcolor, bcolor);
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <show_table+0x21c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3303      	adds	r3, #3
 80008f0:	b298      	uxth	r0, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	b299      	uxth	r1, r3
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <show_table+0x224>)
 80008fc:	f107 0420 	add.w	r4, r7, #32
 8000900:	9102      	str	r1, [sp, #8]
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4622      	mov	r2, r4
 800090c:	4601      	mov	r1, r0
 800090e:	2003      	movs	r0, #3
 8000910:	f7ff fddc 	bl	80004cc <ST7735_DrawString>
}
 8000914:	bf00      	nop
 8000916:	373c      	adds	r7, #60	; 0x3c
 8000918:	46bd      	mov	sp, r7
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	200000d8 	.word	0x200000d8
 8000920:	20000194 	.word	0x20000194
 8000924:	66666667 	.word	0x66666667
 8000928:	20000008 	.word	0x20000008
 800092c:	08004728 	.word	0x08004728

08000930 <reset_screen>:

void reset_screen(int bcolor, int fcolor) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af04      	add	r7, sp, #16
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	  ST7735_FillScreen(bcolor);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	b29b      	uxth	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe8a 	bl	8000658 <ST7735_FillScreen>
	  ST7735_DrawString(3, 3, "Choose size from", Font_7x10, fcolor, bcolor);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b29a      	uxth	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b299      	uxth	r1, r3
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <reset_screen+0x9c>)
 800094e:	9102      	str	r1, [sp, #8]
 8000950:	9201      	str	r2, [sp, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	9200      	str	r2, [sp, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <reset_screen+0xa0>)
 800095a:	2103      	movs	r1, #3
 800095c:	2003      	movs	r0, #3
 800095e:	f7ff fdb5 	bl	80004cc <ST7735_DrawString>
	  ST7735_DrawString(3, 18, "[3;7] by pressing", Font_7x10, fcolor, bcolor);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	b299      	uxth	r1, r3
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <reset_screen+0x9c>)
 800096c:	9102      	str	r1, [sp, #8]
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <reset_screen+0xa4>)
 8000978:	2112      	movs	r1, #18
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff fda6 	bl	80004cc <ST7735_DrawString>
	  ST7735_DrawString(3, 33, "corresponding button", Font_7x10, fcolor, bcolor);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b29a      	uxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	b299      	uxth	r1, r3
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <reset_screen+0x9c>)
 800098a:	9102      	str	r1, [sp, #8]
 800098c:	9201      	str	r2, [sp, #4]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	9200      	str	r2, [sp, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <reset_screen+0xa8>)
 8000996:	2121      	movs	r1, #33	; 0x21
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff fd97 	bl	80004cc <ST7735_DrawString>
	  ST7735_DrawString(3, 63, "Chosen size:", Font_7x10, fcolor, bcolor);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <reset_screen+0x9c>)
 80009a8:	9102      	str	r1, [sp, #8]
 80009aa:	9201      	str	r2, [sp, #4]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	9200      	str	r2, [sp, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <reset_screen+0xac>)
 80009b4:	213f      	movs	r1, #63	; 0x3f
 80009b6:	2003      	movs	r0, #3
 80009b8:	f7ff fd88 	bl	80004cc <ST7735_DrawString>
	  write_size(bcolor, fcolor);
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f924 	bl	8000c0c <write_size>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000008 	.word	0x20000008
 80009d0:	08004734 	.word	0x08004734
 80009d4:	08004748 	.word	0x08004748
 80009d8:	0800475c 	.word	0x0800475c
 80009dc:	08004774 	.word	0x08004774

080009e0 <size_chosed>:

void size_chosed(int size, int entropy, int bcolor, int fcolor) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	603b      	str	r3, [r7, #0]
	schulte_table.size = size;
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <size_chosed+0x38>)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6013      	str	r3, [r2, #0]
	write_size(bcolor, fcolor);
 80009f4:	6839      	ldr	r1, [r7, #0]
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f908 	bl	8000c0c <write_size>
	fill_table(entropy, HAL_GetTick());
 80009fc:	f000 fe7a 	bl	80016f4 <HAL_GetTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4619      	mov	r1, r3
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f000 fd61 	bl	80014cc <fill_table>
	state = CHOSED_SIZE;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <size_chosed+0x3c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000194 	.word	0x20000194
 8000a1c:	200000d8 	.word	0x200000d8

08000a20 <on_stop_pressed>:

void on_stop_pressed(int time) {
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b0bb      	sub	sp, #236	; 0xec
 8000a24:	af04      	add	r7, sp, #16
 8000a26:	6078      	str	r0, [r7, #4]
	time = HAL_GetTick() - time;
 8000a28:	f000 fe64 	bl	80016f4 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	607b      	str	r3, [r7, #4]
	results[schulte_table.size - 3].time_sum += time;
 8000a34:	4b6c      	ldr	r3, [pc, #432]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	1eda      	subs	r2, r3, #3
 8000a3a:	496c      	ldr	r1, [pc, #432]	; (8000bec <on_stop_pressed+0x1cc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	440b      	add	r3, r1
 8000a46:	6819      	ldr	r1, [r3, #0]
 8000a48:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1eda      	subs	r2, r3, #3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4419      	add	r1, r3
 8000a52:	4866      	ldr	r0, [pc, #408]	; (8000bec <on_stop_pressed+0x1cc>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4403      	add	r3, r0
 8000a5e:	6019      	str	r1, [r3, #0]
	++results[schulte_table.size - 3].count;
 8000a60:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1eda      	subs	r2, r3, #3
 8000a66:	4961      	ldr	r1, [pc, #388]	; (8000bec <on_stop_pressed+0x1cc>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	440b      	add	r3, r1
 8000a72:	3304      	adds	r3, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1c59      	adds	r1, r3, #1
 8000a78:	485c      	ldr	r0, [pc, #368]	; (8000bec <on_stop_pressed+0x1cc>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4403      	add	r3, r0
 8000a84:	3304      	adds	r3, #4
 8000a86:	6019      	str	r1, [r3, #0]

	is_best_time(time);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f939 	bl	8000d00 <is_best_time>

	char new_record[100], mean_record[100];
	sprintf(new_record, "New result for %dx%d table:  %02d:%02d:%03d\r\n", schulte_table.size, schulte_table.size, time / 60000, (time / 1000) % 60, time % 1000);
 8000a8e:	4b56      	ldr	r3, [pc, #344]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000a90:	681d      	ldr	r5, [r3, #0]
 8000a92:	4b55      	ldr	r3, [pc, #340]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000a94:	681e      	ldr	r6, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a55      	ldr	r2, [pc, #340]	; (8000bf0 <on_stop_pressed+0x1d0>)
 8000a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9e:	1392      	asrs	r2, r2, #14
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad0      	subs	r0, r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a53      	ldr	r2, [pc, #332]	; (8000bf4 <on_stop_pressed+0x1d4>)
 8000aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aac:	1192      	asrs	r2, r2, #6
 8000aae:	17db      	asrs	r3, r3, #31
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	4b51      	ldr	r3, [pc, #324]	; (8000bf8 <on_stop_pressed+0x1d8>)
 8000ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab8:	4413      	add	r3, r2
 8000aba:	1159      	asrs	r1, r3, #5
 8000abc:	17d3      	asrs	r3, r2, #31
 8000abe:	1ac9      	subs	r1, r1, r3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	1a5b      	subs	r3, r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	1ad1      	subs	r1, r2, r3
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <on_stop_pressed+0x1d4>)
 8000ace:	fb83 4302 	smull	r4, r3, r3, r2
 8000ad2:	119c      	asrs	r4, r3, #6
 8000ad4:	17d3      	asrs	r3, r2, #31
 8000ad6:	1ae3      	subs	r3, r4, r3
 8000ad8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000adc:	fb04 f303 	mul.w	r3, r4, r3
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	9101      	str	r1, [sp, #4]
 8000aea:	9000      	str	r0, [sp, #0]
 8000aec:	4633      	mov	r3, r6
 8000aee:	462a      	mov	r2, r5
 8000af0:	4942      	ldr	r1, [pc, #264]	; (8000bfc <on_stop_pressed+0x1dc>)
 8000af2:	4620      	mov	r0, r4
 8000af4:	f002 fc30 	bl	8003358 <siprintf>
	int sum_time = results[schulte_table.size - 3].time_sum / results[schulte_table.size - 3].count;
 8000af8:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1eda      	subs	r2, r3, #3
 8000afe:	493b      	ldr	r1, [pc, #236]	; (8000bec <on_stop_pressed+0x1cc>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1eda      	subs	r2, r3, #3
 8000b12:	4836      	ldr	r0, [pc, #216]	; (8000bec <on_stop_pressed+0x1cc>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4403      	add	r3, r0
 8000b1e:	3304      	adds	r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	fb91 f3f3 	sdiv	r3, r1, r3
 8000b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	sprintf(mean_record, "Mean result for %dx%d table: %02d:%02d:%03d\r\n", schulte_table.size, schulte_table.size, sum_time / 60000, (sum_time / 1000) % 60, sum_time % 1000);
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000b2c:	681d      	ldr	r5, [r3, #0]
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000b30:	681e      	ldr	r6, [r3, #0]
 8000b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b36:	4a2e      	ldr	r2, [pc, #184]	; (8000bf0 <on_stop_pressed+0x1d0>)
 8000b38:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3c:	1392      	asrs	r2, r2, #14
 8000b3e:	17db      	asrs	r3, r3, #31
 8000b40:	1ad0      	subs	r0, r2, r3
 8000b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000b46:	4a2b      	ldr	r2, [pc, #172]	; (8000bf4 <on_stop_pressed+0x1d4>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1192      	asrs	r2, r2, #6
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad2      	subs	r2, r2, r3
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <on_stop_pressed+0x1d8>)
 8000b54:	fb83 1302 	smull	r1, r3, r3, r2
 8000b58:	4413      	add	r3, r2
 8000b5a:	1159      	asrs	r1, r3, #5
 8000b5c:	17d3      	asrs	r3, r2, #31
 8000b5e:	1ac9      	subs	r1, r1, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	1ad1      	subs	r1, r2, r3
 8000b6a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <on_stop_pressed+0x1d4>)
 8000b70:	fb83 4302 	smull	r4, r3, r3, r2
 8000b74:	119c      	asrs	r4, r3, #6
 8000b76:	17d3      	asrs	r3, r2, #31
 8000b78:	1ae3      	subs	r3, r4, r3
 8000b7a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000b7e:	fb04 f303 	mul.w	r3, r4, r3
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	f107 040c 	add.w	r4, r7, #12
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	9101      	str	r1, [sp, #4]
 8000b8c:	9000      	str	r0, [sp, #0]
 8000b8e:	4633      	mov	r3, r6
 8000b90:	462a      	mov	r2, r5
 8000b92:	491b      	ldr	r1, [pc, #108]	; (8000c00 <on_stop_pressed+0x1e0>)
 8000b94:	4620      	mov	r0, r4
 8000b96:	f002 fbdf 	bl	8003358 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)new_record, strlen(new_record), 100);
 8000b9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fad4 	bl	800014c <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <on_stop_pressed+0x1e4>)
 8000bb0:	f002 f9b4 	bl	8002f1c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)mean_record, strlen(mean_record), 100);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fac7 	bl	800014c <strlen>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	f107 010c 	add.w	r1, r7, #12
 8000bc6:	2364      	movs	r3, #100	; 0x64
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <on_stop_pressed+0x1e4>)
 8000bca:	f002 f9a7 	bl	8002f1c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), 100);
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <on_stop_pressed+0x1e8>)
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <on_stop_pressed+0x1e4>)
 8000bd6:	f002 f9a1 	bl	8002f1c <HAL_UART_Transmit>

	schulte_table.size = 0;
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <on_stop_pressed+0x1c8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	37dc      	adds	r7, #220	; 0xdc
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be8:	20000194 	.word	0x20000194
 8000bec:	20000010 	.word	0x20000010
 8000bf0:	45e7b273 	.word	0x45e7b273
 8000bf4:	10624dd3 	.word	0x10624dd3
 8000bf8:	88888889 	.word	0x88888889
 8000bfc:	08004784 	.word	0x08004784
 8000c00:	080047b4 	.word	0x080047b4
 8000c04:	20000148 	.word	0x20000148
 8000c08:	080047e4 	.word	0x080047e4

08000c0c <write_size>:

/* Helpers */

void write_size(int bcolor, int fcolor) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	if (schulte_table.size == 0) {
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <write_size+0x84>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d112      	bne.n	8000c44 <write_size+0x38>
		ST7735_DrawString(3, 78, "None", Font_7x10, fcolor, bcolor);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b299      	uxth	r1, r3
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <write_size+0x88>)
 8000c28:	9102      	str	r1, [sp, #8]
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	9200      	str	r2, [sp, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <write_size+0x8c>)
 8000c34:	214e      	movs	r1, #78	; 0x4e
 8000c36:	2003      	movs	r0, #3
 8000c38:	f7ff fc48 	bl	80004cc <ST7735_DrawString>
		state = CHOOSING_SIZE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <write_size+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		char format_str[5] = "    \0";
		format_str[0] = schulte_table.size + '0';
		ST7735_DrawString(3, 78, format_str, Font_7x10, fcolor, bcolor);
		state = CHOSED_SIZE;
	}
}
 8000c42:	e021      	b.n	8000c88 <write_size+0x7c>
		char format_str[5] = "    \0";
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <write_size+0x94>)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4e:	6018      	str	r0, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	7019      	strb	r1, [r3, #0]
		format_str[0] = schulte_table.size + '0';
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <write_size+0x84>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3330      	adds	r3, #48	; 0x30
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	723b      	strb	r3, [r7, #8]
		ST7735_DrawString(3, 78, format_str, Font_7x10, fcolor, bcolor);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	b299      	uxth	r1, r3
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <write_size+0x88>)
 8000c6a:	f107 0008 	add.w	r0, r7, #8
 8000c6e:	9102      	str	r1, [sp, #8]
 8000c70:	9201      	str	r2, [sp, #4]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4602      	mov	r2, r0
 8000c7a:	214e      	movs	r1, #78	; 0x4e
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff fc25 	bl	80004cc <ST7735_DrawString>
		state = CHOSED_SIZE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <write_size+0x90>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000194 	.word	0x20000194
 8000c94:	20000008 	.word	0x20000008
 8000c98:	080047e8 	.word	0x080047e8
 8000c9c:	200000d8 	.word	0x200000d8
 8000ca0:	080047f0 	.word	0x080047f0

08000ca4 <play_sound>:

void play_sound(int duration1, int duration2, int time) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < time / (duration1 + duration2); ++i) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e014      	b.n	8000ce0 <play_sound+0x3c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <play_sound+0x58>)
 8000cbc:	f000 ffc7 	bl	8001c4e <HAL_GPIO_WritePin>
		HAL_Delay(duration1);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fd20 	bl	8001708 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <play_sound+0x58>)
 8000cce:	f000 ffbe 	bl	8001c4e <HAL_GPIO_WritePin>
		HAL_Delay(duration2);
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fd17 	bl	8001708 <HAL_Delay>
	for (int i = 0; i < time / (duration1 + duration2); ++i) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbe1      	blt.n	8000cb6 <play_sound+0x12>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <is_best_time>:

void is_best_time(int time) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (time <= results[schulte_table.size - 3].best_time) {
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <is_best_time+0x7c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1eda      	subs	r2, r3, #3
 8000d0e:	491c      	ldr	r1, [pc, #112]	; (8000d80 <is_best_time+0x80>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dc27      	bgt.n	8000d74 <is_best_time+0x74>
		char message[40];
		sprintf(message, "New best time for %dx%d table!\r\n", schulte_table.size, schulte_table.size);
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <is_best_time+0x7c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <is_best_time+0x7c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f107 0008 	add.w	r0, r7, #8
 8000d30:	4914      	ldr	r1, [pc, #80]	; (8000d84 <is_best_time+0x84>)
 8000d32:	f002 fb11 	bl	8003358 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), 100);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa06 	bl	800014c <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f107 0108 	add.w	r1, r7, #8
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	480f      	ldr	r0, [pc, #60]	; (8000d88 <is_best_time+0x88>)
 8000d4c:	f002 f8e6 	bl	8002f1c <HAL_UART_Transmit>
		results[schulte_table.size - 3].best_time = time;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <is_best_time+0x7c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1eda      	subs	r2, r3, #3
 8000d56:	490a      	ldr	r1, [pc, #40]	; (8000d80 <is_best_time+0x80>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3308      	adds	r3, #8
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	601a      	str	r2, [r3, #0]
		play_sound(15, 5, 1000);
 8000d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff ff98 	bl	8000ca4 <play_sound>
	}
}
 8000d74:	bf00      	nop
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000194 	.word	0x20000194
 8000d80:	20000010 	.word	0x20000010
 8000d84:	080047f8 	.word	0x080047f8
 8000d88:	20000148 	.word	0x20000148

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 fc57 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f89b 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 f969 	bl	8001070 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d9e:	f000 f907 	bl	8000fb0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000da2:	f000 f8e9 	bl	8000f78 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000da6:	f000 f939 	bl	800101c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000daa:	f7ff fb2d 	bl	8000408 <ST7735_Init>
  int time;
  int bcolor = 1000;
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	60bb      	str	r3, [r7, #8]
  int fcolor = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  while (1)
  {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0 && state != TABLE_SHOWING) {
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4841      	ldr	r0, [pc, #260]	; (8000ec4 <main+0x138>)
 8000dbe:	f000 ff2f 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10a      	bne.n	8000dde <main+0x52>
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <main+0x13c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d006      	beq.n	8000dde <main+0x52>
	  size_chosed(3, 18, bcolor, fcolor);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	2112      	movs	r1, #18
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f7ff fe02 	bl	80009e0 <size_chosed>
 8000ddc:	e071      	b.n	8000ec2 <main+0x136>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0 && state != TABLE_SHOWING) {
 8000dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de2:	4838      	ldr	r0, [pc, #224]	; (8000ec4 <main+0x138>)
 8000de4:	f000 ff1c 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10a      	bne.n	8000e04 <main+0x78>
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <main+0x13c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d006      	beq.n	8000e04 <main+0x78>
	  size_chosed(4, 32, bcolor, fcolor);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f7ff fdef 	bl	80009e0 <size_chosed>
 8000e02:	e05e      	b.n	8000ec2 <main+0x136>
	}  else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 0 && state != TABLE_SHOWING) {
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	482e      	ldr	r0, [pc, #184]	; (8000ec4 <main+0x138>)
 8000e0a:	f000 ff09 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <main+0x9e>
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <main+0x13c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d006      	beq.n	8000e2a <main+0x9e>
	  size_chosed(5, 50, bcolor, fcolor);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	2132      	movs	r1, #50	; 0x32
 8000e22:	2005      	movs	r0, #5
 8000e24:	f7ff fddc 	bl	80009e0 <size_chosed>
 8000e28:	e04b      	b.n	8000ec2 <main+0x136>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14) == 0 && state != TABLE_SHOWING) {
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <main+0x138>)
 8000e30:	f000 fef6 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10a      	bne.n	8000e50 <main+0xc4>
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <main+0x13c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d006      	beq.n	8000e50 <main+0xc4>
	  size_chosed(6, 72, bcolor, fcolor);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	2148      	movs	r1, #72	; 0x48
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f7ff fdc9 	bl	80009e0 <size_chosed>
 8000e4e:	e038      	b.n	8000ec2 <main+0x136>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == 0 && state != TABLE_SHOWING) {
 8000e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e54:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <main+0x138>)
 8000e56:	f000 fee3 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10a      	bne.n	8000e76 <main+0xea>
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <main+0x13c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d006      	beq.n	8000e76 <main+0xea>
	  size_chosed(7, 98, bcolor, fcolor);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	2162      	movs	r1, #98	; 0x62
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f7ff fdb6 	bl	80009e0 <size_chosed>
 8000e74:	e025      	b.n	8000ec2 <main+0x136>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0 && state == CHOSED_SIZE) {
 8000e76:	2101      	movs	r1, #1
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <main+0x140>)
 8000e7a:	f000 fed1 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10c      	bne.n	8000e9e <main+0x112>
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <main+0x13c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <main+0x112>
	  show_table(bcolor, fcolor);
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	68b8      	ldr	r0, [r7, #8]
 8000e90:	f7ff fc38 	bl	8000704 <show_table>
	  time = HAL_GetTick();
 8000e94:	f000 fc2e 	bl	80016f4 <HAL_GetTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e011      	b.n	8000ec2 <main+0x136>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0 && state == TABLE_SHOWING) {
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <main+0x140>)
 8000ea2:	f000 febd 	bl	8001c20 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d185      	bne.n	8000db8 <main+0x2c>
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <main+0x13c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d181      	bne.n	8000db8 <main+0x2c>
	  on_stop_pressed(time);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fdb3 	bl	8000a20 <on_stop_pressed>
	  reset_screen(bcolor, fcolor);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	68b8      	ldr	r0, [r7, #8]
 8000ebe:	f7ff fd37 	bl	8000930 <reset_screen>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0 && state != TABLE_SHOWING) {
 8000ec2:	e779      	b.n	8000db8 <main+0x2c>
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	200000d8 	.word	0x200000d8
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	2228      	movs	r2, #40	; 0x28
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 f9c6 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f00:	230a      	movs	r3, #10
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 febd 	bl	8001c98 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f24:	f000 f8fe 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f929 	bl	800219c <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f50:	f000 f8e8 	bl	8001124 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 faa9 	bl	80024b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f6c:	f000 f8da 	bl	8001124 <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_RTC_Init+0x30>)
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <MX_RTC_Init+0x34>)
 8000f80:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_RTC_Init+0x30>)
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_RTC_Init+0x30>)
 8000f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f90:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_RTC_Init+0x30>)
 8000f94:	f001 fbfc 	bl	8002790 <HAL_RTC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000f9e:	f000 f8c1 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200000dc 	.word	0x200000dc
 8000fac:	40002800 	.word	0x40002800

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <MX_SPI1_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_SPI1_Init+0x64>)
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_SPI1_Init+0x64>)
 8001002:	f001 fcce 	bl	80029a2 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800100c:	f000 f88a 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000f0 	.word	0x200000f0
 8001018:	40013000 	.word	0x40013000

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART1_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART1_UART_Init+0x4c>)
 8001054:	f001 ff12 	bl	8002e7c <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f861 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000148 	.word	0x20000148
 800106c:	40013800 	.word	0x40013800

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <MX_GPIO_Init+0xa8>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_GPIO_Init+0xa8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 80010ba:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_GPIO_Init+0xac>)
 80010bc:	f000 fdc7 	bl	8001c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c0:	2303      	movs	r3, #3
 80010c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4619      	mov	r1, r3
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0xac>)
 80010d4:	f000 fc20 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 80010d8:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80010dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2302      	movs	r3, #2
 80010e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <MX_GPIO_Init+0xac>)
 80010f2:	f000 fc11 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA13 PA14
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010fa:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_GPIO_Init+0xb0>)
 800110c:	f000 fc04 	bl	8001918 <HAL_GPIO_Init>

}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40010800 	.word	0x40010800

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_MspInit+0x5c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_MspInit+0x5c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_MspInit+0x5c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_MspInit+0x5c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_MspInit+0x60>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_MspInit+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_RTC_MspInit+0x3c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d110      	bne.n	80011c8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80011a6:	f000 fd6b 	bl	8001c80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_RTC_MspInit+0x40>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_RTC_MspInit+0x40>)
 80011b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_RTC_MspInit+0x40>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_RTC_MspInit+0x44>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40002800 	.word	0x40002800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	4242043c 	.word	0x4242043c

080011dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <HAL_SPI_MspInit+0x70>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d123      	bne.n	8001244 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_SPI_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <HAL_SPI_MspInit+0x74>)
 8001202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x74>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_SPI_MspInit+0x74>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_SPI_MspInit+0x74>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_SPI_MspInit+0x74>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_SPI_MspInit+0x78>)
 8001240:	f000 fb6a 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d131      	bne.n	80012dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x90>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_MspInit+0x90>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4619      	mov	r1, r3
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <HAL_UART_MspInit+0x94>)
 80012be:	f000 fb2b 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0x94>)
 80012d8:	f000 fb1e 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010800 	.word	0x40010800

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f9cb 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}

0800133e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
	return 1;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <_kill>:

int _kill(int pid, int sig)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001356:	f001 ff61 	bl	800321c <__errno>
 800135a:	4603      	mov	r3, r0
 800135c:	2216      	movs	r2, #22
 800135e:	601a      	str	r2, [r3, #0]
	return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_exit>:

void _exit (int status)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe7 	bl	800134c <_kill>
	while (1) {}		/* Make sure we hang here */
 800137e:	e7fe      	b.n	800137e <_exit+0x12>

08001380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001392:	f3af 8000 	nop.w
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
	}

return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
	}
	return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001418:	605a      	str	r2, [r3, #4]
	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_isatty>:

int _isatty(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f001 feca 	bl	800321c <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20005000 	.word	0x20005000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000190 	.word	0x20000190
 80014bc:	20000270 	.word	0x20000270

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <fill_table>:

#include "table.h"

TableContent schulte_table = {0, {}};

void fill_table(int entropy, int sr) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	srand(sr);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fed1 	bl	8003280 <srand>

	int elem = 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < schulte_table.size; ++i) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e6:	e01a      	b.n	800151e <fill_table+0x52>
		for (int j = 0; j < schulte_table.size; ++j) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
 80014ec:	e00f      	b.n	800150e <fill_table+0x42>
			schulte_table.data[i][j] = elem++;
 80014ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f0:	1c53      	adds	r3, r2, #1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f4:	483f      	ldr	r0, [pc, #252]	; (80015f4 <fill_table+0x128>)
 80014f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f8:	460b      	mov	r3, r1
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a5b      	subs	r3, r3, r1
 80014fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001500:	440b      	add	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4403      	add	r3, r0
 8001506:	605a      	str	r2, [r3, #4]
		for (int j = 0; j < schulte_table.size; ++j) {
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3301      	adds	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <fill_table+0x128>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	429a      	cmp	r2, r3
 8001516:	dbea      	blt.n	80014ee <fill_table+0x22>
	for (int i = 0; i < schulte_table.size; ++i) {
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	3301      	adds	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <fill_table+0x128>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001524:	429a      	cmp	r2, r3
 8001526:	dbdf      	blt.n	80014e8 <fill_table+0x1c>
		}
	}

	for (int i = 0; i < entropy; ++i) {
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	e058      	b.n	80015e0 <fill_table+0x114>
		int row1 = rand() % schulte_table.size;
 800152e:	f001 fed5 	bl	80032dc <rand>
 8001532:	4602      	mov	r2, r0
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <fill_table+0x128>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fb92 f1f3 	sdiv	r1, r2, r3
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	61fb      	str	r3, [r7, #28]
		int col1 = rand() % schulte_table.size;
 8001544:	f001 feca 	bl	80032dc <rand>
 8001548:	4602      	mov	r2, r0
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <fill_table+0x128>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	61bb      	str	r3, [r7, #24]
		int row2 = rand() % schulte_table.size;
 800155a:	f001 febf 	bl	80032dc <rand>
 800155e:	4602      	mov	r2, r0
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <fill_table+0x128>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fb92 f1f3 	sdiv	r1, r2, r3
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
		int col2 = rand() % schulte_table.size;
 8001570:	f001 feb4 	bl	80032dc <rand>
 8001574:	4602      	mov	r2, r0
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <fill_table+0x128>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fb92 f1f3 	sdiv	r1, r2, r3
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	613b      	str	r3, [r7, #16]

		int temp = schulte_table.data[row1][col1];
 8001586:	491b      	ldr	r1, [pc, #108]	; (80015f4 <fill_table+0x128>)
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
		schulte_table.data[row1][col1] = schulte_table.data[row2][col2];
 800159c:	4915      	ldr	r1, [pc, #84]	; (80015f4 <fill_table+0x128>)
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <fill_table+0x128>)
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	6059      	str	r1, [r3, #4]
		schulte_table.data[row2][col2] = temp;
 80015c4:	490b      	ldr	r1, [pc, #44]	; (80015f4 <fill_table+0x128>)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < entropy; ++i) {
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	3301      	adds	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	6a3a      	ldr	r2, [r7, #32]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dba2      	blt.n	800152e <fill_table+0x62>
	}
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000194 	.word	0x20000194

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff ff62 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015fe:	490c      	ldr	r1, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001600:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001614:	4c09      	ldr	r4, [pc, #36]	; (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f001 fe01 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7ff fbb1 	bl	8000d8c <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001634:	08005154 	.word	0x08005154
  ldr r2, =_sbss
 8001638:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800163c:	20000270 	.word	0x20000270

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f92b 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd66 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f935 	bl	80018fe <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f90b 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000004c 	.word	0x2000004c
 80016c8:	20000054 	.word	0x20000054
 80016cc:	20000050 	.word	0x20000050

080016d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_IncTick+0x1c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x20>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x20>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000054 	.word	0x20000054
 80016f0:	2000025c 	.word	0x2000025c

080016f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetTick+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	2000025c 	.word	0x2000025c

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff fff0 	bl	80016f4 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffe0 	bl	80016f4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000054 	.word	0x20000054

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f7ff ff90 	bl	80017b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff49 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff5e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff90 	bl	8001808 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5f 	bl	80017b4 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffb0 	bl	800186c <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e169      	b.n	8001c00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800192c:	2201      	movs	r2, #1
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8158 	bne.w	8001bfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a9a      	ldr	r2, [pc, #616]	; (8001bb8 <HAL_GPIO_Init+0x2a0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d05e      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001954:	4a98      	ldr	r2, [pc, #608]	; (8001bb8 <HAL_GPIO_Init+0x2a0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d875      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800195a:	4a98      	ldr	r2, [pc, #608]	; (8001bbc <HAL_GPIO_Init+0x2a4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d058      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001960:	4a96      	ldr	r2, [pc, #600]	; (8001bbc <HAL_GPIO_Init+0x2a4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d86f      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001966:	4a96      	ldr	r2, [pc, #600]	; (8001bc0 <HAL_GPIO_Init+0x2a8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d052      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 800196c:	4a94      	ldr	r2, [pc, #592]	; (8001bc0 <HAL_GPIO_Init+0x2a8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d869      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001972:	4a94      	ldr	r2, [pc, #592]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d04c      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001978:	4a92      	ldr	r2, [pc, #584]	; (8001bc4 <HAL_GPIO_Init+0x2ac>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d863      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800197e:	4a92      	ldr	r2, [pc, #584]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d046      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
 8001984:	4a90      	ldr	r2, [pc, #576]	; (8001bc8 <HAL_GPIO_Init+0x2b0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d85d      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 800198a:	2b12      	cmp	r3, #18
 800198c:	d82a      	bhi.n	80019e4 <HAL_GPIO_Init+0xcc>
 800198e:	2b12      	cmp	r3, #18
 8001990:	d859      	bhi.n	8001a46 <HAL_GPIO_Init+0x12e>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_GPIO_Init+0x80>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	08001a13 	.word	0x08001a13
 800199c:	080019ed 	.word	0x080019ed
 80019a0:	080019ff 	.word	0x080019ff
 80019a4:	08001a41 	.word	0x08001a41
 80019a8:	08001a47 	.word	0x08001a47
 80019ac:	08001a47 	.word	0x08001a47
 80019b0:	08001a47 	.word	0x08001a47
 80019b4:	08001a47 	.word	0x08001a47
 80019b8:	08001a47 	.word	0x08001a47
 80019bc:	08001a47 	.word	0x08001a47
 80019c0:	08001a47 	.word	0x08001a47
 80019c4:	08001a47 	.word	0x08001a47
 80019c8:	08001a47 	.word	0x08001a47
 80019cc:	08001a47 	.word	0x08001a47
 80019d0:	08001a47 	.word	0x08001a47
 80019d4:	08001a47 	.word	0x08001a47
 80019d8:	08001a47 	.word	0x08001a47
 80019dc:	080019f5 	.word	0x080019f5
 80019e0:	08001a09 	.word	0x08001a09
 80019e4:	4a79      	ldr	r2, [pc, #484]	; (8001bcc <HAL_GPIO_Init+0x2b4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ea:	e02c      	b.n	8001a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e029      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e024      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	3308      	adds	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e01f      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e01a      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e013      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	611a      	str	r2, [r3, #16]
          break;
 8001a32:	e009      	b.n	8001a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	615a      	str	r2, [r3, #20]
          break;
 8001a3e:	e003      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x130>
          break;
 8001a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	; 0xff
 8001a4c:	d801      	bhi.n	8001a52 <HAL_GPIO_Init+0x13a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_Init+0x13e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d802      	bhi.n	8001a64 <HAL_GPIO_Init+0x14c>
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x152>
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	3b08      	subs	r3, #8
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	210f      	movs	r1, #15
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	6a39      	ldr	r1, [r7, #32]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80b1 	beq.w	8001bfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <HAL_GPIO_Init+0x2b8>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x2b8>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab0:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <HAL_GPIO_Init+0x2bc>)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1ec>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1e8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3e      	ldr	r2, [pc, #248]	; (8001be0 <HAL_GPIO_Init+0x2c8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1e4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3d      	ldr	r2, [pc, #244]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1e0>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e006      	b.n	8001b06 <HAL_GPIO_Init+0x1ee>
 8001af8:	2304      	movs	r3, #4
 8001afa:	e004      	b.n	8001b06 <HAL_GPIO_Init+0x1ee>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e002      	b.n	8001b06 <HAL_GPIO_Init+0x1ee>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_GPIO_Init+0x1ee>
 8001b04:	2300      	movs	r3, #0
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	f002 0203 	and.w	r2, r2, #3
 8001b0c:	0092      	lsls	r2, r2, #2
 8001b0e:	4093      	lsls	r3, r2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b16:	492f      	ldr	r1, [pc, #188]	; (8001bd4 <HAL_GPIO_Init+0x2bc>)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	492c      	ldr	r1, [pc, #176]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4928      	ldr	r1, [pc, #160]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4922      	ldr	r1, [pc, #136]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	491e      	ldr	r1, [pc, #120]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4918      	ldr	r1, [pc, #96]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4914      	ldr	r1, [pc, #80]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d021      	beq.n	8001bec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	490e      	ldr	r1, [pc, #56]	; (8001be8 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e021      	b.n	8001bfa <HAL_GPIO_Init+0x2e2>
 8001bb6:	bf00      	nop
 8001bb8:	10320000 	.word	0x10320000
 8001bbc:	10310000 	.word	0x10310000
 8001bc0:	10220000 	.word	0x10220000
 8001bc4:	10210000 	.word	0x10210000
 8001bc8:	10120000 	.word	0x10120000
 8001bcc:	10110000 	.word	0x10110000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40010800 	.word	0x40010800
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40011000 	.word	0x40011000
 8001be4:	40011400 	.word	0x40011400
 8001be8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4909      	ldr	r1, [pc, #36]	; (8001c1c <HAL_GPIO_Init+0x304>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f47f ae8e 	bne.w	800192c <HAL_GPIO_Init+0x14>
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	372c      	adds	r7, #44	; 0x2c
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e001      	b.n	8001c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5e:	787b      	ldrb	r3, [r7, #1]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c64:	887a      	ldrh	r2, [r7, #2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6a:	e003      	b.n	8001c74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	420e0020 	.word	0x420e0020

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e272      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00c      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc4:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d112      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d06c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d168      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e24c      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76>
 8001d00:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7a      	ldr	r2, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a77      	ldr	r2, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xbc>
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a71      	ldr	r2, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcbe 	bl	80016f4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fcba 	bl	80016f4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e200      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe4>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fcaa 	bl	80016f4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fca6 	bl	80016f4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ec      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x10c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1c0      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4939      	ldr	r1, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e03a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc5f 	bl	80016f4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc5b 	bl	80016f4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1a1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4927      	ldr	r1, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc3e 	bl	80016f4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fc3a 	bl	80016f4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e180      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03a      	beq.n	8001f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fc1e 	bl	80016f4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc1a 	bl	80016f4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e160      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 face 	bl	800247c <RCC_Delay>
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fc04 	bl	80016f4 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fc00 	bl	80016f4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d908      	bls.n	8001f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e146      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	42420000 	.word	0x42420000
 8001f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e9      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a6 	beq.w	8002076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a87      	ldr	r2, [pc, #540]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbc1 	bl	80016f4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff fbbd 	bl	80016f4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	; 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e103      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4c8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	e02d      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x334>
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a69      	ldr	r2, [pc, #420]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x356>
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a60      	ldr	r2, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb71 	bl	80016f4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb6d 	bl	80016f4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0b1      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b4b      	ldr	r3, [pc, #300]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x37e>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb5b 	bl	80016f4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fb57 	bl	80016f4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e09b      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b40      	ldr	r3, [pc, #256]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8087 	beq.w	800218e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d061      	beq.n	8002150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d146      	bne.n	8002122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb2b 	bl	80016f4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb27 	bl	80016f4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e06d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a19      	ldr	r1, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	430b      	orrs	r3, r1
 80020ee:	491b      	ldr	r1, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff fafb 	bl	80016f4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff faf7 	bl	80016f4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e03d      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
 8002120:	e035      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fae4 	bl	80016f4 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff fae0 	bl	80016f4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e026      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x4c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x498>
 800214e:	e01e      	b.n	800218e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e019      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x500>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d0      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4965      	ldr	r1, [pc, #404]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800221a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d040      	beq.n	80022bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e073      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4936      	ldr	r1, [pc, #216]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800228c:	f7ff fa32 	bl	80016f4 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7ff fa2e 	bl	80016f4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e053      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d210      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1cc>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f990 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	08004fc4 	.word	0x08004fc4
 8002368:	2000004c 	.word	0x2000004c
 800236c:	20000050 	.word	0x20000050

08002370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_RCC_GetSysClockFreq+0x94>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x30>
 800239a:	2b08      	cmp	r3, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x36>
 800239e:	e027      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	613b      	str	r3, [r7, #16]
      break;
 80023a4:	e027      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
 80023b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_RCC_GetSysClockFreq+0x94>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c5b      	lsrs	r3, r3, #17
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d2:	fb03 f202 	mul.w	r2, r3, r2
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e004      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	613b      	str	r3, [r7, #16]
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetSysClockFreq+0x98>)
 80023f2:	613b      	str	r3, [r7, #16]
      break;
 80023f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f6:	693b      	ldr	r3, [r7, #16]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	007a1200 	.word	0x007a1200
 800240c:	08004fdc 	.word	0x08004fdc
 8002410:	08004fec 	.word	0x08004fec
 8002414:	003d0900 	.word	0x003d0900

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_RCC_GetHCLKFreq+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	2000004c 	.word	0x2000004c

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002430:	f7ff fff2 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	08004fd4 	.word	0x08004fd4

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002458:	f7ff ffde 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0adb      	lsrs	r3, r3, #11
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	08004fd4 	.word	0x08004fd4

0800247c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <RCC_Delay+0x34>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <RCC_Delay+0x38>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a5b      	lsrs	r3, r3, #9
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002498:	bf00      	nop
  }
  while (Delay --);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	60fa      	str	r2, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <RCC_Delay+0x1c>
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	2000004c 	.word	0x2000004c
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d07d      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	61d3      	str	r3, [r2, #28]
 80024f0:	4b49      	ldr	r3, [pc, #292]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250c:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7ff f8ec 	bl	80016f4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251e:	e008      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7ff f8e8 	bl	80016f4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e06d      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02e      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d027      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d014      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff f8b7 	bl	80016f4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff f8b3 	bl	80016f4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e036      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4917      	ldr	r1, [pc, #92]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	490b      	ldr	r1, [pc, #44]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	42420440 	.word	0x42420440

08002624 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b10      	cmp	r3, #16
 800264a:	f200 808a 	bhi.w	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d045      	beq.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d075      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800265a:	e082      	b.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d07b      	beq.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0c9b      	lsrs	r3, r3, #18
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	4a41      	ldr	r2, [pc, #260]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002678:	5cd3      	ldrb	r3, [r2, r3]
 800267a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0c5b      	lsrs	r3, r3, #17
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	4a3b      	ldr	r2, [pc, #236]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00d      	beq.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026a0:	4a38      	ldr	r2, [pc, #224]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	e004      	b.n	80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c8:	d102      	bne.n	80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	61bb      	str	r3, [r7, #24]
      break;
 80026ce:	e04a      	b.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4a2d      	ldr	r2, [pc, #180]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
      break;
 80026de:	e042      	b.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f0:	d108      	bne.n	8002704 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	e01f      	b.n	8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270e:	d109      	bne.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800271c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e00f      	b.n	8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800272e:	d11c      	bne.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d016      	beq.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800273c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002740:	61bb      	str	r3, [r7, #24]
      break;
 8002742:	e012      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002744:	e011      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002746:	f7ff fe85 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0b9b      	lsrs	r3, r3, #14
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	61bb      	str	r3, [r7, #24]
      break;
 8002760:	e004      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800276a:	bf00      	nop
    }
  }
  return (frequency);
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	08004ff0 	.word	0x08004ff0
 8002780:	08005000 	.word	0x08005000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	003d0900 	.word	0x003d0900
 800278c:	aaaaaaab 	.word	0xaaaaaaab

08002790 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07a      	b.n	800289c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7c5b      	ldrb	r3, [r3, #17]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fcec 	bl	8001194 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f870 	bl	80028a8 <HAL_RTC_WaitForSynchro>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2204      	movs	r2, #4
 80027d2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e061      	b.n	800289c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f892 	bl	8002902 <RTC_EnterInitMode>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2204      	movs	r2, #4
 80027e8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e056      	b.n	800289c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0207 	bic.w	r2, r2, #7
 80027fc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RTC_Init+0x114>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_RTC_Init+0x114>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RTC_Init+0x114>)
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4921      	ldr	r1, [pc, #132]	; (80028a4 <HAL_RTC_Init+0x114>)
 8002820:	4313      	orrs	r3, r2
 8002822:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d003      	beq.n	8002836 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e00e      	b.n	8002854 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002836:	2001      	movs	r0, #1
 8002838:	f7ff fef4 	bl	8002624 <HAL_RCCEx_GetPeriphCLKFreq>
 800283c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2204      	movs	r2, #4
 8002848:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e026      	b.n	800289c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3b01      	subs	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	0c1a      	lsrs	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 020f 	and.w	r2, r2, #15
 8002860:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	b292      	uxth	r2, r2
 800286a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f870 	bl	8002952 <RTC_ExitInitMode>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00c      	b.n	800289c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40006c00 	.word	0x40006c00

080028a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e01d      	b.n	80028fa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0208 	bic.w	r2, r2, #8
 80028cc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80028ce:	f7fe ff11 	bl	80016f4 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80028d4:	e009      	b.n	80028ea <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028d6:	f7fe ff0d 	bl	80016f4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e4:	d901      	bls.n	80028ea <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e007      	b.n	80028fa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800290e:	f7fe fef1 	bl	80016f4 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002914:	e009      	b.n	800292a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002916:	f7fe feed 	bl	80016f4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002924:	d901      	bls.n	800292a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e00f      	b.n	800294a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ee      	beq.n	8002916 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0210 	orr.w	r2, r2, #16
 8002946:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0210 	bic.w	r2, r2, #16
 800296c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800296e:	f7fe fec1 	bl	80016f4 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002974:	e009      	b.n	800298a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002976:	f7fe febd 	bl	80016f4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002984:	d901      	bls.n	800298a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e007      	b.n	800299a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ee      	beq.n	8002976 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e076      	b.n	8002aa2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c4:	d009      	beq.n	80029da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
 80029cc:	e005      	b.n	80029da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe fbf1 	bl	80011dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	ea42 0103 	orr.w	r1, r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	0c1a      	lsrs	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f002 0204 	and.w	r2, r2, #4
 8002a80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b088      	sub	sp, #32
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_SPI_Transmit+0x22>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e12d      	b.n	8002d28 <HAL_SPI_Transmit+0x27e>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad4:	f7fe fe0e 	bl	80016f4 <HAL_GetTick>
 8002ad8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aee:	e116      	b.n	8002d1e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_Transmit+0x52>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b00:	e10d      	b.n	8002d1e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2203      	movs	r2, #3
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b48:	d10f      	bne.n	8002b6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d007      	beq.n	8002b88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b90:	d14f      	bne.n	8002c32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0xf6>
 8002b9a:	8afb      	ldrh	r3, [r7, #22]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d142      	bne.n	8002c26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	881a      	ldrh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	1c9a      	adds	r2, r3, #2
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bc4:	e02f      	b.n	8002c26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d112      	bne.n	8002bfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bf8:	e015      	b.n	8002c26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bfa:	f7fe fd7b 	bl	80016f4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d803      	bhi.n	8002c12 <HAL_SPI_Transmit+0x168>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d102      	bne.n	8002c18 <HAL_SPI_Transmit+0x16e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c24:	e07b      	b.n	8002d1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ca      	bne.n	8002bc6 <HAL_SPI_Transmit+0x11c>
 8002c30:	e050      	b.n	8002cd4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0x196>
 8002c3a:	8afb      	ldrh	r3, [r7, #22]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d144      	bne.n	8002cca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c66:	e030      	b.n	8002cca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d113      	bne.n	8002c9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c9c:	e015      	b.n	8002cca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9e:	f7fe fd29 	bl	80016f4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d803      	bhi.n	8002cb6 <HAL_SPI_Transmit+0x20c>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x212>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cc8:	e029      	b.n	8002d1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1c9      	bne.n	8002c68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	6839      	ldr	r1, [r7, #0]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f8b1 	bl	8002e40 <SPI_EndRxTxTransaction>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e003      	b.n	8002d1e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d40:	f7fe fcd8 	bl	80016f4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d50:	f7fe fcd0 	bl	80016f4 <HAL_GetTick>
 8002d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d56:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d66:	e054      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d050      	beq.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d70:	f7fe fcc0 	bl	80016f4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13d      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9e:	d111      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da8:	d004      	beq.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d107      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dcc:	d10f      	bne.n	8002dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e017      	b.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d19b      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000004c 	.word	0x2000004c

08002e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff6a 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e000      	b.n	8002e74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e042      	b.n	8002f14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f9d8 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f91d 	bl	8003100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d16d      	bne.n	8003018 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_UART_Transmit+0x2c>
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e066      	b.n	800301a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2221      	movs	r2, #33	; 0x21
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fe fbcb 	bl	80016f4 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	88fa      	ldrh	r2, [r7, #6]
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0x6c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f90:	e02a      	b.n	8002fe8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f840 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e007      	b.n	8002fda <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cf      	bne.n	8002f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f810 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b090      	sub	sp, #64	; 0x40
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	e050      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d04c      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
 8003042:	f7fe fb57 	bl	80016f4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800304e:	429a      	cmp	r2, r3
 8003050:	d241      	bcs.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003072:	637a      	str	r2, [r7, #52]	; 0x34
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e5      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	613b      	str	r3, [r7, #16]
   return(result);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a6:	623a      	str	r2, [r7, #32]
 80030a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	69f9      	ldr	r1, [r7, #28]
 80030ac:	6a3a      	ldr	r2, [r7, #32]
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00f      	b.n	80030f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d09f      	beq.n	8003034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3740      	adds	r7, #64	; 0x40
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800313a:	f023 030c 	bic.w	r3, r3, #12
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2c      	ldr	r2, [pc, #176]	; (8003214 <UART_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff f974 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	e002      	b.n	8003176 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff f95c 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	0119      	lsls	r1, r3, #4
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <UART_SetConfig+0x118>)
 80031ae:	fba3 0302 	umull	r0, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <UART_SetConfig+0x118>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	4419      	add	r1, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <UART_SetConfig+0x118>)
 80031e6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2064      	movs	r0, #100	; 0x64
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	440a      	add	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40013800 	.word	0x40013800
 8003218:	51eb851f 	.word	0x51eb851f

0800321c <__errno>:
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <__errno+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000058 	.word	0x20000058

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	2600      	movs	r6, #0
 800322c:	4d0c      	ldr	r5, [pc, #48]	; (8003260 <__libc_init_array+0x38>)
 800322e:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	f001 fa6a 	bl	8004710 <_init>
 800323c:	2600      	movs	r6, #0
 800323e:	4d0a      	ldr	r5, [pc, #40]	; (8003268 <__libc_init_array+0x40>)
 8003240:	4c0a      	ldr	r4, [pc, #40]	; (800326c <__libc_init_array+0x44>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	0800514c 	.word	0x0800514c
 8003264:	0800514c 	.word	0x0800514c
 8003268:	0800514c 	.word	0x0800514c
 800326c:	08005150 	.word	0x08005150

08003270 <memset>:
 8003270:	4603      	mov	r3, r0
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <srand>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <srand+0x44>)
 8003284:	4604      	mov	r4, r0
 8003286:	681d      	ldr	r5, [r3, #0]
 8003288:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800328a:	b9b3      	cbnz	r3, 80032ba <srand+0x3a>
 800328c:	2018      	movs	r0, #24
 800328e:	f000 f8b3 	bl	80033f8 <malloc>
 8003292:	4602      	mov	r2, r0
 8003294:	63a8      	str	r0, [r5, #56]	; 0x38
 8003296:	b920      	cbnz	r0, 80032a2 <srand+0x22>
 8003298:	2142      	movs	r1, #66	; 0x42
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <srand+0x48>)
 800329c:	480b      	ldr	r0, [pc, #44]	; (80032cc <srand+0x4c>)
 800329e:	f000 f87b 	bl	8003398 <__assert_func>
 80032a2:	490b      	ldr	r1, [pc, #44]	; (80032d0 <srand+0x50>)
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <srand+0x54>)
 80032a6:	e9c0 1300 	strd	r1, r3, [r0]
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <srand+0x58>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	6083      	str	r3, [r0, #8]
 80032b0:	230b      	movs	r3, #11
 80032b2:	8183      	strh	r3, [r0, #12]
 80032b4:	2001      	movs	r0, #1
 80032b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80032ba:	2200      	movs	r2, #0
 80032bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80032be:	611c      	str	r4, [r3, #16]
 80032c0:	615a      	str	r2, [r3, #20]
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	20000058 	.word	0x20000058
 80032c8:	08005008 	.word	0x08005008
 80032cc:	0800501f 	.word	0x0800501f
 80032d0:	abcd330e 	.word	0xabcd330e
 80032d4:	e66d1234 	.word	0xe66d1234
 80032d8:	0005deec 	.word	0x0005deec

080032dc <rand>:
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <rand+0x5c>)
 80032de:	b510      	push	{r4, lr}
 80032e0:	681c      	ldr	r4, [r3, #0]
 80032e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032e4:	b9b3      	cbnz	r3, 8003314 <rand+0x38>
 80032e6:	2018      	movs	r0, #24
 80032e8:	f000 f886 	bl	80033f8 <malloc>
 80032ec:	4602      	mov	r2, r0
 80032ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80032f0:	b920      	cbnz	r0, 80032fc <rand+0x20>
 80032f2:	214e      	movs	r1, #78	; 0x4e
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <rand+0x60>)
 80032f6:	4812      	ldr	r0, [pc, #72]	; (8003340 <rand+0x64>)
 80032f8:	f000 f84e 	bl	8003398 <__assert_func>
 80032fc:	4911      	ldr	r1, [pc, #68]	; (8003344 <rand+0x68>)
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <rand+0x6c>)
 8003300:	e9c0 1300 	strd	r1, r3, [r0]
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <rand+0x70>)
 8003306:	2100      	movs	r1, #0
 8003308:	6083      	str	r3, [r0, #8]
 800330a:	230b      	movs	r3, #11
 800330c:	8183      	strh	r3, [r0, #12]
 800330e:	2001      	movs	r0, #1
 8003310:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003314:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003316:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <rand+0x74>)
 8003318:	6920      	ldr	r0, [r4, #16]
 800331a:	6963      	ldr	r3, [r4, #20]
 800331c:	4342      	muls	r2, r0
 800331e:	490d      	ldr	r1, [pc, #52]	; (8003354 <rand+0x78>)
 8003320:	fb01 2203 	mla	r2, r1, r3, r2
 8003324:	fba0 0101 	umull	r0, r1, r0, r1
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	eb42 0001 	adc.w	r0, r2, r1
 800332e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003332:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003336:	bd10      	pop	{r4, pc}
 8003338:	20000058 	.word	0x20000058
 800333c:	08005008 	.word	0x08005008
 8003340:	0800501f 	.word	0x0800501f
 8003344:	abcd330e 	.word	0xabcd330e
 8003348:	e66d1234 	.word	0xe66d1234
 800334c:	0005deec 	.word	0x0005deec
 8003350:	5851f42d 	.word	0x5851f42d
 8003354:	4c957f2d 	.word	0x4c957f2d

08003358 <siprintf>:
 8003358:	b40e      	push	{r1, r2, r3}
 800335a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800335e:	b500      	push	{lr}
 8003360:	b09c      	sub	sp, #112	; 0x70
 8003362:	ab1d      	add	r3, sp, #116	; 0x74
 8003364:	9002      	str	r0, [sp, #8]
 8003366:	9006      	str	r0, [sp, #24]
 8003368:	9107      	str	r1, [sp, #28]
 800336a:	9104      	str	r1, [sp, #16]
 800336c:	4808      	ldr	r0, [pc, #32]	; (8003390 <siprintf+0x38>)
 800336e:	4909      	ldr	r1, [pc, #36]	; (8003394 <siprintf+0x3c>)
 8003370:	f853 2b04 	ldr.w	r2, [r3], #4
 8003374:	9105      	str	r1, [sp, #20]
 8003376:	6800      	ldr	r0, [r0, #0]
 8003378:	a902      	add	r1, sp, #8
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	f000 f97c 	bl	8003678 <_svfiprintf_r>
 8003380:	2200      	movs	r2, #0
 8003382:	9b02      	ldr	r3, [sp, #8]
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	b01c      	add	sp, #112	; 0x70
 8003388:	f85d eb04 	ldr.w	lr, [sp], #4
 800338c:	b003      	add	sp, #12
 800338e:	4770      	bx	lr
 8003390:	20000058 	.word	0x20000058
 8003394:	ffff0208 	.word	0xffff0208

08003398 <__assert_func>:
 8003398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800339a:	4614      	mov	r4, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <__assert_func+0x2c>)
 80033a0:	4605      	mov	r5, r0
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68d8      	ldr	r0, [r3, #12]
 80033a6:	b14c      	cbz	r4, 80033bc <__assert_func+0x24>
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <__assert_func+0x30>)
 80033aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80033ae:	9100      	str	r1, [sp, #0]
 80033b0:	462b      	mov	r3, r5
 80033b2:	4906      	ldr	r1, [pc, #24]	; (80033cc <__assert_func+0x34>)
 80033b4:	f000 f80e 	bl	80033d4 <fiprintf>
 80033b8:	f000 fe1c 	bl	8003ff4 <abort>
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <__assert_func+0x38>)
 80033be:	461c      	mov	r4, r3
 80033c0:	e7f3      	b.n	80033aa <__assert_func+0x12>
 80033c2:	bf00      	nop
 80033c4:	20000058 	.word	0x20000058
 80033c8:	0800507a 	.word	0x0800507a
 80033cc:	08005087 	.word	0x08005087
 80033d0:	080050b5 	.word	0x080050b5

080033d4 <fiprintf>:
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	b503      	push	{r0, r1, lr}
 80033d8:	4601      	mov	r1, r0
 80033da:	ab03      	add	r3, sp, #12
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <fiprintf+0x20>)
 80033de:	f853 2b04 	ldr.w	r2, [r3], #4
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	f000 fa6f 	bl	80038c8 <_vfiprintf_r>
 80033ea:	b002      	add	sp, #8
 80033ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f0:	b003      	add	sp, #12
 80033f2:	4770      	bx	lr
 80033f4:	20000058 	.word	0x20000058

080033f8 <malloc>:
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <malloc+0xc>)
 80033fa:	4601      	mov	r1, r0
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f000 b86b 	b.w	80034d8 <_malloc_r>
 8003402:	bf00      	nop
 8003404:	20000058 	.word	0x20000058

08003408 <_free_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4605      	mov	r5, r0
 800340c:	2900      	cmp	r1, #0
 800340e:	d040      	beq.n	8003492 <_free_r+0x8a>
 8003410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003414:	1f0c      	subs	r4, r1, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bfb8      	it	lt
 800341a:	18e4      	addlt	r4, r4, r3
 800341c:	f001 f844 	bl	80044a8 <__malloc_lock>
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <_free_r+0x8c>)
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	b933      	cbnz	r3, 8003434 <_free_r+0x2c>
 8003426:	6063      	str	r3, [r4, #4]
 8003428:	6014      	str	r4, [r2, #0]
 800342a:	4628      	mov	r0, r5
 800342c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003430:	f001 b840 	b.w	80044b4 <__malloc_unlock>
 8003434:	42a3      	cmp	r3, r4
 8003436:	d908      	bls.n	800344a <_free_r+0x42>
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	1821      	adds	r1, r4, r0
 800343c:	428b      	cmp	r3, r1
 800343e:	bf01      	itttt	eq
 8003440:	6819      	ldreq	r1, [r3, #0]
 8003442:	685b      	ldreq	r3, [r3, #4]
 8003444:	1809      	addeq	r1, r1, r0
 8003446:	6021      	streq	r1, [r4, #0]
 8003448:	e7ed      	b.n	8003426 <_free_r+0x1e>
 800344a:	461a      	mov	r2, r3
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b10b      	cbz	r3, 8003454 <_free_r+0x4c>
 8003450:	42a3      	cmp	r3, r4
 8003452:	d9fa      	bls.n	800344a <_free_r+0x42>
 8003454:	6811      	ldr	r1, [r2, #0]
 8003456:	1850      	adds	r0, r2, r1
 8003458:	42a0      	cmp	r0, r4
 800345a:	d10b      	bne.n	8003474 <_free_r+0x6c>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	4401      	add	r1, r0
 8003460:	1850      	adds	r0, r2, r1
 8003462:	4283      	cmp	r3, r0
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	d1e0      	bne.n	800342a <_free_r+0x22>
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4401      	add	r1, r0
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	6053      	str	r3, [r2, #4]
 8003472:	e7da      	b.n	800342a <_free_r+0x22>
 8003474:	d902      	bls.n	800347c <_free_r+0x74>
 8003476:	230c      	movs	r3, #12
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	e7d6      	b.n	800342a <_free_r+0x22>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	1821      	adds	r1, r4, r0
 8003480:	428b      	cmp	r3, r1
 8003482:	bf01      	itttt	eq
 8003484:	6819      	ldreq	r1, [r3, #0]
 8003486:	685b      	ldreq	r3, [r3, #4]
 8003488:	1809      	addeq	r1, r1, r0
 800348a:	6021      	streq	r1, [r4, #0]
 800348c:	6063      	str	r3, [r4, #4]
 800348e:	6054      	str	r4, [r2, #4]
 8003490:	e7cb      	b.n	800342a <_free_r+0x22>
 8003492:	bd38      	pop	{r3, r4, r5, pc}
 8003494:	20000260 	.word	0x20000260

08003498 <sbrk_aligned>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	4e0e      	ldr	r6, [pc, #56]	; (80034d4 <sbrk_aligned+0x3c>)
 800349c:	460c      	mov	r4, r1
 800349e:	6831      	ldr	r1, [r6, #0]
 80034a0:	4605      	mov	r5, r0
 80034a2:	b911      	cbnz	r1, 80034aa <sbrk_aligned+0x12>
 80034a4:	f000 fcd6 	bl	8003e54 <_sbrk_r>
 80034a8:	6030      	str	r0, [r6, #0]
 80034aa:	4621      	mov	r1, r4
 80034ac:	4628      	mov	r0, r5
 80034ae:	f000 fcd1 	bl	8003e54 <_sbrk_r>
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	d00a      	beq.n	80034cc <sbrk_aligned+0x34>
 80034b6:	1cc4      	adds	r4, r0, #3
 80034b8:	f024 0403 	bic.w	r4, r4, #3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d007      	beq.n	80034d0 <sbrk_aligned+0x38>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fcc6 	bl	8003e54 <_sbrk_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d101      	bne.n	80034d0 <sbrk_aligned+0x38>
 80034cc:	f04f 34ff 	mov.w	r4, #4294967295
 80034d0:	4620      	mov	r0, r4
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	20000264 	.word	0x20000264

080034d8 <_malloc_r>:
 80034d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034dc:	1ccd      	adds	r5, r1, #3
 80034de:	f025 0503 	bic.w	r5, r5, #3
 80034e2:	3508      	adds	r5, #8
 80034e4:	2d0c      	cmp	r5, #12
 80034e6:	bf38      	it	cc
 80034e8:	250c      	movcc	r5, #12
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	4607      	mov	r7, r0
 80034ee:	db01      	blt.n	80034f4 <_malloc_r+0x1c>
 80034f0:	42a9      	cmp	r1, r5
 80034f2:	d905      	bls.n	8003500 <_malloc_r+0x28>
 80034f4:	230c      	movs	r3, #12
 80034f6:	2600      	movs	r6, #0
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4630      	mov	r0, r6
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003500:	4e2e      	ldr	r6, [pc, #184]	; (80035bc <_malloc_r+0xe4>)
 8003502:	f000 ffd1 	bl	80044a8 <__malloc_lock>
 8003506:	6833      	ldr	r3, [r6, #0]
 8003508:	461c      	mov	r4, r3
 800350a:	bb34      	cbnz	r4, 800355a <_malloc_r+0x82>
 800350c:	4629      	mov	r1, r5
 800350e:	4638      	mov	r0, r7
 8003510:	f7ff ffc2 	bl	8003498 <sbrk_aligned>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	4604      	mov	r4, r0
 8003518:	d14d      	bne.n	80035b6 <_malloc_r+0xde>
 800351a:	6834      	ldr	r4, [r6, #0]
 800351c:	4626      	mov	r6, r4
 800351e:	2e00      	cmp	r6, #0
 8003520:	d140      	bne.n	80035a4 <_malloc_r+0xcc>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	4631      	mov	r1, r6
 8003526:	4638      	mov	r0, r7
 8003528:	eb04 0803 	add.w	r8, r4, r3
 800352c:	f000 fc92 	bl	8003e54 <_sbrk_r>
 8003530:	4580      	cmp	r8, r0
 8003532:	d13a      	bne.n	80035aa <_malloc_r+0xd2>
 8003534:	6821      	ldr	r1, [r4, #0]
 8003536:	3503      	adds	r5, #3
 8003538:	1a6d      	subs	r5, r5, r1
 800353a:	f025 0503 	bic.w	r5, r5, #3
 800353e:	3508      	adds	r5, #8
 8003540:	2d0c      	cmp	r5, #12
 8003542:	bf38      	it	cc
 8003544:	250c      	movcc	r5, #12
 8003546:	4638      	mov	r0, r7
 8003548:	4629      	mov	r1, r5
 800354a:	f7ff ffa5 	bl	8003498 <sbrk_aligned>
 800354e:	3001      	adds	r0, #1
 8003550:	d02b      	beq.n	80035aa <_malloc_r+0xd2>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	442b      	add	r3, r5
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	e00e      	b.n	8003578 <_malloc_r+0xa0>
 800355a:	6822      	ldr	r2, [r4, #0]
 800355c:	1b52      	subs	r2, r2, r5
 800355e:	d41e      	bmi.n	800359e <_malloc_r+0xc6>
 8003560:	2a0b      	cmp	r2, #11
 8003562:	d916      	bls.n	8003592 <_malloc_r+0xba>
 8003564:	1961      	adds	r1, r4, r5
 8003566:	42a3      	cmp	r3, r4
 8003568:	6025      	str	r5, [r4, #0]
 800356a:	bf18      	it	ne
 800356c:	6059      	strne	r1, [r3, #4]
 800356e:	6863      	ldr	r3, [r4, #4]
 8003570:	bf08      	it	eq
 8003572:	6031      	streq	r1, [r6, #0]
 8003574:	5162      	str	r2, [r4, r5]
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	4638      	mov	r0, r7
 800357a:	f104 060b 	add.w	r6, r4, #11
 800357e:	f000 ff99 	bl	80044b4 <__malloc_unlock>
 8003582:	f026 0607 	bic.w	r6, r6, #7
 8003586:	1d23      	adds	r3, r4, #4
 8003588:	1af2      	subs	r2, r6, r3
 800358a:	d0b6      	beq.n	80034fa <_malloc_r+0x22>
 800358c:	1b9b      	subs	r3, r3, r6
 800358e:	50a3      	str	r3, [r4, r2]
 8003590:	e7b3      	b.n	80034fa <_malloc_r+0x22>
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	42a3      	cmp	r3, r4
 8003596:	bf0c      	ite	eq
 8003598:	6032      	streq	r2, [r6, #0]
 800359a:	605a      	strne	r2, [r3, #4]
 800359c:	e7ec      	b.n	8003578 <_malloc_r+0xa0>
 800359e:	4623      	mov	r3, r4
 80035a0:	6864      	ldr	r4, [r4, #4]
 80035a2:	e7b2      	b.n	800350a <_malloc_r+0x32>
 80035a4:	4634      	mov	r4, r6
 80035a6:	6876      	ldr	r6, [r6, #4]
 80035a8:	e7b9      	b.n	800351e <_malloc_r+0x46>
 80035aa:	230c      	movs	r3, #12
 80035ac:	4638      	mov	r0, r7
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	f000 ff80 	bl	80044b4 <__malloc_unlock>
 80035b4:	e7a1      	b.n	80034fa <_malloc_r+0x22>
 80035b6:	6025      	str	r5, [r4, #0]
 80035b8:	e7de      	b.n	8003578 <_malloc_r+0xa0>
 80035ba:	bf00      	nop
 80035bc:	20000260 	.word	0x20000260

080035c0 <__ssputs_r>:
 80035c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	688e      	ldr	r6, [r1, #8]
 80035c6:	4682      	mov	sl, r0
 80035c8:	429e      	cmp	r6, r3
 80035ca:	460c      	mov	r4, r1
 80035cc:	4690      	mov	r8, r2
 80035ce:	461f      	mov	r7, r3
 80035d0:	d838      	bhi.n	8003644 <__ssputs_r+0x84>
 80035d2:	898a      	ldrh	r2, [r1, #12]
 80035d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035d8:	d032      	beq.n	8003640 <__ssputs_r+0x80>
 80035da:	6825      	ldr	r5, [r4, #0]
 80035dc:	6909      	ldr	r1, [r1, #16]
 80035de:	3301      	adds	r3, #1
 80035e0:	eba5 0901 	sub.w	r9, r5, r1
 80035e4:	6965      	ldr	r5, [r4, #20]
 80035e6:	444b      	add	r3, r9
 80035e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035f0:	106d      	asrs	r5, r5, #1
 80035f2:	429d      	cmp	r5, r3
 80035f4:	bf38      	it	cc
 80035f6:	461d      	movcc	r5, r3
 80035f8:	0553      	lsls	r3, r2, #21
 80035fa:	d531      	bpl.n	8003660 <__ssputs_r+0xa0>
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7ff ff6b 	bl	80034d8 <_malloc_r>
 8003602:	4606      	mov	r6, r0
 8003604:	b950      	cbnz	r0, 800361c <__ssputs_r+0x5c>
 8003606:	230c      	movs	r3, #12
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	f8ca 3000 	str.w	r3, [sl]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361c:	464a      	mov	r2, r9
 800361e:	6921      	ldr	r1, [r4, #16]
 8003620:	f000 ff1a 	bl	8004458 <memcpy>
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800362a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362e:	81a3      	strh	r3, [r4, #12]
 8003630:	6126      	str	r6, [r4, #16]
 8003632:	444e      	add	r6, r9
 8003634:	6026      	str	r6, [r4, #0]
 8003636:	463e      	mov	r6, r7
 8003638:	6165      	str	r5, [r4, #20]
 800363a:	eba5 0509 	sub.w	r5, r5, r9
 800363e:	60a5      	str	r5, [r4, #8]
 8003640:	42be      	cmp	r6, r7
 8003642:	d900      	bls.n	8003646 <__ssputs_r+0x86>
 8003644:	463e      	mov	r6, r7
 8003646:	4632      	mov	r2, r6
 8003648:	4641      	mov	r1, r8
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	f000 ff12 	bl	8004474 <memmove>
 8003650:	68a3      	ldr	r3, [r4, #8]
 8003652:	2000      	movs	r0, #0
 8003654:	1b9b      	subs	r3, r3, r6
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	4433      	add	r3, r6
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	e7db      	b.n	8003618 <__ssputs_r+0x58>
 8003660:	462a      	mov	r2, r5
 8003662:	f000 ff2d 	bl	80044c0 <_realloc_r>
 8003666:	4606      	mov	r6, r0
 8003668:	2800      	cmp	r0, #0
 800366a:	d1e1      	bne.n	8003630 <__ssputs_r+0x70>
 800366c:	4650      	mov	r0, sl
 800366e:	6921      	ldr	r1, [r4, #16]
 8003670:	f7ff feca 	bl	8003408 <_free_r>
 8003674:	e7c7      	b.n	8003606 <__ssputs_r+0x46>
	...

08003678 <_svfiprintf_r>:
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	4698      	mov	r8, r3
 800367e:	898b      	ldrh	r3, [r1, #12]
 8003680:	4607      	mov	r7, r0
 8003682:	061b      	lsls	r3, r3, #24
 8003684:	460d      	mov	r5, r1
 8003686:	4614      	mov	r4, r2
 8003688:	b09d      	sub	sp, #116	; 0x74
 800368a:	d50e      	bpl.n	80036aa <_svfiprintf_r+0x32>
 800368c:	690b      	ldr	r3, [r1, #16]
 800368e:	b963      	cbnz	r3, 80036aa <_svfiprintf_r+0x32>
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	f7ff ff21 	bl	80034d8 <_malloc_r>
 8003696:	6028      	str	r0, [r5, #0]
 8003698:	6128      	str	r0, [r5, #16]
 800369a:	b920      	cbnz	r0, 80036a6 <_svfiprintf_r+0x2e>
 800369c:	230c      	movs	r3, #12
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	e0d1      	b.n	800384a <_svfiprintf_r+0x1d2>
 80036a6:	2340      	movs	r3, #64	; 0x40
 80036a8:	616b      	str	r3, [r5, #20]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9309      	str	r3, [sp, #36]	; 0x24
 80036ae:	2320      	movs	r3, #32
 80036b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036b4:	2330      	movs	r3, #48	; 0x30
 80036b6:	f04f 0901 	mov.w	r9, #1
 80036ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80036be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003864 <_svfiprintf_r+0x1ec>
 80036c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036c6:	4623      	mov	r3, r4
 80036c8:	469a      	mov	sl, r3
 80036ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ce:	b10a      	cbz	r2, 80036d4 <_svfiprintf_r+0x5c>
 80036d0:	2a25      	cmp	r2, #37	; 0x25
 80036d2:	d1f9      	bne.n	80036c8 <_svfiprintf_r+0x50>
 80036d4:	ebba 0b04 	subs.w	fp, sl, r4
 80036d8:	d00b      	beq.n	80036f2 <_svfiprintf_r+0x7a>
 80036da:	465b      	mov	r3, fp
 80036dc:	4622      	mov	r2, r4
 80036de:	4629      	mov	r1, r5
 80036e0:	4638      	mov	r0, r7
 80036e2:	f7ff ff6d 	bl	80035c0 <__ssputs_r>
 80036e6:	3001      	adds	r0, #1
 80036e8:	f000 80aa 	beq.w	8003840 <_svfiprintf_r+0x1c8>
 80036ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ee:	445a      	add	r2, fp
 80036f0:	9209      	str	r2, [sp, #36]	; 0x24
 80036f2:	f89a 3000 	ldrb.w	r3, [sl]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80a2 	beq.w	8003840 <_svfiprintf_r+0x1c8>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003706:	f10a 0a01 	add.w	sl, sl, #1
 800370a:	9304      	str	r3, [sp, #16]
 800370c:	9307      	str	r3, [sp, #28]
 800370e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003712:	931a      	str	r3, [sp, #104]	; 0x68
 8003714:	4654      	mov	r4, sl
 8003716:	2205      	movs	r2, #5
 8003718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800371c:	4851      	ldr	r0, [pc, #324]	; (8003864 <_svfiprintf_r+0x1ec>)
 800371e:	f000 fe8d 	bl	800443c <memchr>
 8003722:	9a04      	ldr	r2, [sp, #16]
 8003724:	b9d8      	cbnz	r0, 800375e <_svfiprintf_r+0xe6>
 8003726:	06d0      	lsls	r0, r2, #27
 8003728:	bf44      	itt	mi
 800372a:	2320      	movmi	r3, #32
 800372c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003730:	0711      	lsls	r1, r2, #28
 8003732:	bf44      	itt	mi
 8003734:	232b      	movmi	r3, #43	; 0x2b
 8003736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800373a:	f89a 3000 	ldrb.w	r3, [sl]
 800373e:	2b2a      	cmp	r3, #42	; 0x2a
 8003740:	d015      	beq.n	800376e <_svfiprintf_r+0xf6>
 8003742:	4654      	mov	r4, sl
 8003744:	2000      	movs	r0, #0
 8003746:	f04f 0c0a 	mov.w	ip, #10
 800374a:	9a07      	ldr	r2, [sp, #28]
 800374c:	4621      	mov	r1, r4
 800374e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003752:	3b30      	subs	r3, #48	; 0x30
 8003754:	2b09      	cmp	r3, #9
 8003756:	d94e      	bls.n	80037f6 <_svfiprintf_r+0x17e>
 8003758:	b1b0      	cbz	r0, 8003788 <_svfiprintf_r+0x110>
 800375a:	9207      	str	r2, [sp, #28]
 800375c:	e014      	b.n	8003788 <_svfiprintf_r+0x110>
 800375e:	eba0 0308 	sub.w	r3, r0, r8
 8003762:	fa09 f303 	lsl.w	r3, r9, r3
 8003766:	4313      	orrs	r3, r2
 8003768:	46a2      	mov	sl, r4
 800376a:	9304      	str	r3, [sp, #16]
 800376c:	e7d2      	b.n	8003714 <_svfiprintf_r+0x9c>
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	1d19      	adds	r1, r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9103      	str	r1, [sp, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfbb      	ittet	lt
 800377a:	425b      	neglt	r3, r3
 800377c:	f042 0202 	orrlt.w	r2, r2, #2
 8003780:	9307      	strge	r3, [sp, #28]
 8003782:	9307      	strlt	r3, [sp, #28]
 8003784:	bfb8      	it	lt
 8003786:	9204      	strlt	r2, [sp, #16]
 8003788:	7823      	ldrb	r3, [r4, #0]
 800378a:	2b2e      	cmp	r3, #46	; 0x2e
 800378c:	d10c      	bne.n	80037a8 <_svfiprintf_r+0x130>
 800378e:	7863      	ldrb	r3, [r4, #1]
 8003790:	2b2a      	cmp	r3, #42	; 0x2a
 8003792:	d135      	bne.n	8003800 <_svfiprintf_r+0x188>
 8003794:	9b03      	ldr	r3, [sp, #12]
 8003796:	3402      	adds	r4, #2
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	9203      	str	r2, [sp, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfb8      	it	lt
 80037a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80037a6:	9305      	str	r3, [sp, #20]
 80037a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003868 <_svfiprintf_r+0x1f0>
 80037ac:	2203      	movs	r2, #3
 80037ae:	4650      	mov	r0, sl
 80037b0:	7821      	ldrb	r1, [r4, #0]
 80037b2:	f000 fe43 	bl	800443c <memchr>
 80037b6:	b140      	cbz	r0, 80037ca <_svfiprintf_r+0x152>
 80037b8:	2340      	movs	r3, #64	; 0x40
 80037ba:	eba0 000a 	sub.w	r0, r0, sl
 80037be:	fa03 f000 	lsl.w	r0, r3, r0
 80037c2:	9b04      	ldr	r3, [sp, #16]
 80037c4:	3401      	adds	r4, #1
 80037c6:	4303      	orrs	r3, r0
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ce:	2206      	movs	r2, #6
 80037d0:	4826      	ldr	r0, [pc, #152]	; (800386c <_svfiprintf_r+0x1f4>)
 80037d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037d6:	f000 fe31 	bl	800443c <memchr>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d038      	beq.n	8003850 <_svfiprintf_r+0x1d8>
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <_svfiprintf_r+0x1f8>)
 80037e0:	bb1b      	cbnz	r3, 800382a <_svfiprintf_r+0x1b2>
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	3307      	adds	r3, #7
 80037e6:	f023 0307 	bic.w	r3, r3, #7
 80037ea:	3308      	adds	r3, #8
 80037ec:	9303      	str	r3, [sp, #12]
 80037ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f0:	4433      	add	r3, r6
 80037f2:	9309      	str	r3, [sp, #36]	; 0x24
 80037f4:	e767      	b.n	80036c6 <_svfiprintf_r+0x4e>
 80037f6:	460c      	mov	r4, r1
 80037f8:	2001      	movs	r0, #1
 80037fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80037fe:	e7a5      	b.n	800374c <_svfiprintf_r+0xd4>
 8003800:	2300      	movs	r3, #0
 8003802:	f04f 0c0a 	mov.w	ip, #10
 8003806:	4619      	mov	r1, r3
 8003808:	3401      	adds	r4, #1
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	4620      	mov	r0, r4
 800380e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003812:	3a30      	subs	r2, #48	; 0x30
 8003814:	2a09      	cmp	r2, #9
 8003816:	d903      	bls.n	8003820 <_svfiprintf_r+0x1a8>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0c5      	beq.n	80037a8 <_svfiprintf_r+0x130>
 800381c:	9105      	str	r1, [sp, #20]
 800381e:	e7c3      	b.n	80037a8 <_svfiprintf_r+0x130>
 8003820:	4604      	mov	r4, r0
 8003822:	2301      	movs	r3, #1
 8003824:	fb0c 2101 	mla	r1, ip, r1, r2
 8003828:	e7f0      	b.n	800380c <_svfiprintf_r+0x194>
 800382a:	ab03      	add	r3, sp, #12
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	462a      	mov	r2, r5
 8003830:	4638      	mov	r0, r7
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <_svfiprintf_r+0x1fc>)
 8003834:	a904      	add	r1, sp, #16
 8003836:	f3af 8000 	nop.w
 800383a:	1c42      	adds	r2, r0, #1
 800383c:	4606      	mov	r6, r0
 800383e:	d1d6      	bne.n	80037ee <_svfiprintf_r+0x176>
 8003840:	89ab      	ldrh	r3, [r5, #12]
 8003842:	065b      	lsls	r3, r3, #25
 8003844:	f53f af2c 	bmi.w	80036a0 <_svfiprintf_r+0x28>
 8003848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384a:	b01d      	add	sp, #116	; 0x74
 800384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003850:	ab03      	add	r3, sp, #12
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	462a      	mov	r2, r5
 8003856:	4638      	mov	r0, r7
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <_svfiprintf_r+0x1fc>)
 800385a:	a904      	add	r1, sp, #16
 800385c:	f000 f9d4 	bl	8003c08 <_printf_i>
 8003860:	e7eb      	b.n	800383a <_svfiprintf_r+0x1c2>
 8003862:	bf00      	nop
 8003864:	080050b6 	.word	0x080050b6
 8003868:	080050bc 	.word	0x080050bc
 800386c:	080050c0 	.word	0x080050c0
 8003870:	00000000 	.word	0x00000000
 8003874:	080035c1 	.word	0x080035c1

08003878 <__sfputc_r>:
 8003878:	6893      	ldr	r3, [r2, #8]
 800387a:	b410      	push	{r4}
 800387c:	3b01      	subs	r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	da07      	bge.n	8003894 <__sfputc_r+0x1c>
 8003884:	6994      	ldr	r4, [r2, #24]
 8003886:	42a3      	cmp	r3, r4
 8003888:	db01      	blt.n	800388e <__sfputc_r+0x16>
 800388a:	290a      	cmp	r1, #10
 800388c:	d102      	bne.n	8003894 <__sfputc_r+0x1c>
 800388e:	bc10      	pop	{r4}
 8003890:	f000 baf0 	b.w	8003e74 <__swbuf_r>
 8003894:	6813      	ldr	r3, [r2, #0]
 8003896:	1c58      	adds	r0, r3, #1
 8003898:	6010      	str	r0, [r2, #0]
 800389a:	7019      	strb	r1, [r3, #0]
 800389c:	4608      	mov	r0, r1
 800389e:	bc10      	pop	{r4}
 80038a0:	4770      	bx	lr

080038a2 <__sfputs_r>:
 80038a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a4:	4606      	mov	r6, r0
 80038a6:	460f      	mov	r7, r1
 80038a8:	4614      	mov	r4, r2
 80038aa:	18d5      	adds	r5, r2, r3
 80038ac:	42ac      	cmp	r4, r5
 80038ae:	d101      	bne.n	80038b4 <__sfputs_r+0x12>
 80038b0:	2000      	movs	r0, #0
 80038b2:	e007      	b.n	80038c4 <__sfputs_r+0x22>
 80038b4:	463a      	mov	r2, r7
 80038b6:	4630      	mov	r0, r6
 80038b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038bc:	f7ff ffdc 	bl	8003878 <__sfputc_r>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d1f3      	bne.n	80038ac <__sfputs_r+0xa>
 80038c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c8 <_vfiprintf_r>:
 80038c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038cc:	460d      	mov	r5, r1
 80038ce:	4614      	mov	r4, r2
 80038d0:	4698      	mov	r8, r3
 80038d2:	4606      	mov	r6, r0
 80038d4:	b09d      	sub	sp, #116	; 0x74
 80038d6:	b118      	cbz	r0, 80038e0 <_vfiprintf_r+0x18>
 80038d8:	6983      	ldr	r3, [r0, #24]
 80038da:	b90b      	cbnz	r3, 80038e0 <_vfiprintf_r+0x18>
 80038dc:	f000 fca8 	bl	8004230 <__sinit>
 80038e0:	4b89      	ldr	r3, [pc, #548]	; (8003b08 <_vfiprintf_r+0x240>)
 80038e2:	429d      	cmp	r5, r3
 80038e4:	d11b      	bne.n	800391e <_vfiprintf_r+0x56>
 80038e6:	6875      	ldr	r5, [r6, #4]
 80038e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ea:	07d9      	lsls	r1, r3, #31
 80038ec:	d405      	bmi.n	80038fa <_vfiprintf_r+0x32>
 80038ee:	89ab      	ldrh	r3, [r5, #12]
 80038f0:	059a      	lsls	r2, r3, #22
 80038f2:	d402      	bmi.n	80038fa <_vfiprintf_r+0x32>
 80038f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f6:	f000 fd39 	bl	800436c <__retarget_lock_acquire_recursive>
 80038fa:	89ab      	ldrh	r3, [r5, #12]
 80038fc:	071b      	lsls	r3, r3, #28
 80038fe:	d501      	bpl.n	8003904 <_vfiprintf_r+0x3c>
 8003900:	692b      	ldr	r3, [r5, #16]
 8003902:	b9eb      	cbnz	r3, 8003940 <_vfiprintf_r+0x78>
 8003904:	4629      	mov	r1, r5
 8003906:	4630      	mov	r0, r6
 8003908:	f000 fb06 	bl	8003f18 <__swsetup_r>
 800390c:	b1c0      	cbz	r0, 8003940 <_vfiprintf_r+0x78>
 800390e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003910:	07dc      	lsls	r4, r3, #31
 8003912:	d50e      	bpl.n	8003932 <_vfiprintf_r+0x6a>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	b01d      	add	sp, #116	; 0x74
 800391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391e:	4b7b      	ldr	r3, [pc, #492]	; (8003b0c <_vfiprintf_r+0x244>)
 8003920:	429d      	cmp	r5, r3
 8003922:	d101      	bne.n	8003928 <_vfiprintf_r+0x60>
 8003924:	68b5      	ldr	r5, [r6, #8]
 8003926:	e7df      	b.n	80038e8 <_vfiprintf_r+0x20>
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <_vfiprintf_r+0x248>)
 800392a:	429d      	cmp	r5, r3
 800392c:	bf08      	it	eq
 800392e:	68f5      	ldreq	r5, [r6, #12]
 8003930:	e7da      	b.n	80038e8 <_vfiprintf_r+0x20>
 8003932:	89ab      	ldrh	r3, [r5, #12]
 8003934:	0598      	lsls	r0, r3, #22
 8003936:	d4ed      	bmi.n	8003914 <_vfiprintf_r+0x4c>
 8003938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800393a:	f000 fd18 	bl	800436e <__retarget_lock_release_recursive>
 800393e:	e7e9      	b.n	8003914 <_vfiprintf_r+0x4c>
 8003940:	2300      	movs	r3, #0
 8003942:	9309      	str	r3, [sp, #36]	; 0x24
 8003944:	2320      	movs	r3, #32
 8003946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800394a:	2330      	movs	r3, #48	; 0x30
 800394c:	f04f 0901 	mov.w	r9, #1
 8003950:	f8cd 800c 	str.w	r8, [sp, #12]
 8003954:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b14 <_vfiprintf_r+0x24c>
 8003958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800395c:	4623      	mov	r3, r4
 800395e:	469a      	mov	sl, r3
 8003960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003964:	b10a      	cbz	r2, 800396a <_vfiprintf_r+0xa2>
 8003966:	2a25      	cmp	r2, #37	; 0x25
 8003968:	d1f9      	bne.n	800395e <_vfiprintf_r+0x96>
 800396a:	ebba 0b04 	subs.w	fp, sl, r4
 800396e:	d00b      	beq.n	8003988 <_vfiprintf_r+0xc0>
 8003970:	465b      	mov	r3, fp
 8003972:	4622      	mov	r2, r4
 8003974:	4629      	mov	r1, r5
 8003976:	4630      	mov	r0, r6
 8003978:	f7ff ff93 	bl	80038a2 <__sfputs_r>
 800397c:	3001      	adds	r0, #1
 800397e:	f000 80aa 	beq.w	8003ad6 <_vfiprintf_r+0x20e>
 8003982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003984:	445a      	add	r2, fp
 8003986:	9209      	str	r2, [sp, #36]	; 0x24
 8003988:	f89a 3000 	ldrb.w	r3, [sl]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a2 	beq.w	8003ad6 <_vfiprintf_r+0x20e>
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800399c:	f10a 0a01 	add.w	sl, sl, #1
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	9307      	str	r3, [sp, #28]
 80039a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a8:	931a      	str	r3, [sp, #104]	; 0x68
 80039aa:	4654      	mov	r4, sl
 80039ac:	2205      	movs	r2, #5
 80039ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b2:	4858      	ldr	r0, [pc, #352]	; (8003b14 <_vfiprintf_r+0x24c>)
 80039b4:	f000 fd42 	bl	800443c <memchr>
 80039b8:	9a04      	ldr	r2, [sp, #16]
 80039ba:	b9d8      	cbnz	r0, 80039f4 <_vfiprintf_r+0x12c>
 80039bc:	06d1      	lsls	r1, r2, #27
 80039be:	bf44      	itt	mi
 80039c0:	2320      	movmi	r3, #32
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c6:	0713      	lsls	r3, r2, #28
 80039c8:	bf44      	itt	mi
 80039ca:	232b      	movmi	r3, #43	; 0x2b
 80039cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d0:	f89a 3000 	ldrb.w	r3, [sl]
 80039d4:	2b2a      	cmp	r3, #42	; 0x2a
 80039d6:	d015      	beq.n	8003a04 <_vfiprintf_r+0x13c>
 80039d8:	4654      	mov	r4, sl
 80039da:	2000      	movs	r0, #0
 80039dc:	f04f 0c0a 	mov.w	ip, #10
 80039e0:	9a07      	ldr	r2, [sp, #28]
 80039e2:	4621      	mov	r1, r4
 80039e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e8:	3b30      	subs	r3, #48	; 0x30
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d94e      	bls.n	8003a8c <_vfiprintf_r+0x1c4>
 80039ee:	b1b0      	cbz	r0, 8003a1e <_vfiprintf_r+0x156>
 80039f0:	9207      	str	r2, [sp, #28]
 80039f2:	e014      	b.n	8003a1e <_vfiprintf_r+0x156>
 80039f4:	eba0 0308 	sub.w	r3, r0, r8
 80039f8:	fa09 f303 	lsl.w	r3, r9, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	46a2      	mov	sl, r4
 8003a00:	9304      	str	r3, [sp, #16]
 8003a02:	e7d2      	b.n	80039aa <_vfiprintf_r+0xe2>
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	1d19      	adds	r1, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	9103      	str	r1, [sp, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bfbb      	ittet	lt
 8003a10:	425b      	neglt	r3, r3
 8003a12:	f042 0202 	orrlt.w	r2, r2, #2
 8003a16:	9307      	strge	r3, [sp, #28]
 8003a18:	9307      	strlt	r3, [sp, #28]
 8003a1a:	bfb8      	it	lt
 8003a1c:	9204      	strlt	r2, [sp, #16]
 8003a1e:	7823      	ldrb	r3, [r4, #0]
 8003a20:	2b2e      	cmp	r3, #46	; 0x2e
 8003a22:	d10c      	bne.n	8003a3e <_vfiprintf_r+0x176>
 8003a24:	7863      	ldrb	r3, [r4, #1]
 8003a26:	2b2a      	cmp	r3, #42	; 0x2a
 8003a28:	d135      	bne.n	8003a96 <_vfiprintf_r+0x1ce>
 8003a2a:	9b03      	ldr	r3, [sp, #12]
 8003a2c:	3402      	adds	r4, #2
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	9203      	str	r2, [sp, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bfb8      	it	lt
 8003a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a3c:	9305      	str	r3, [sp, #20]
 8003a3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b18 <_vfiprintf_r+0x250>
 8003a42:	2203      	movs	r2, #3
 8003a44:	4650      	mov	r0, sl
 8003a46:	7821      	ldrb	r1, [r4, #0]
 8003a48:	f000 fcf8 	bl	800443c <memchr>
 8003a4c:	b140      	cbz	r0, 8003a60 <_vfiprintf_r+0x198>
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	eba0 000a 	sub.w	r0, r0, sl
 8003a54:	fa03 f000 	lsl.w	r0, r3, r0
 8003a58:	9b04      	ldr	r3, [sp, #16]
 8003a5a:	3401      	adds	r4, #1
 8003a5c:	4303      	orrs	r3, r0
 8003a5e:	9304      	str	r3, [sp, #16]
 8003a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a64:	2206      	movs	r2, #6
 8003a66:	482d      	ldr	r0, [pc, #180]	; (8003b1c <_vfiprintf_r+0x254>)
 8003a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a6c:	f000 fce6 	bl	800443c <memchr>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d03f      	beq.n	8003af4 <_vfiprintf_r+0x22c>
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <_vfiprintf_r+0x258>)
 8003a76:	bb1b      	cbnz	r3, 8003ac0 <_vfiprintf_r+0x1f8>
 8003a78:	9b03      	ldr	r3, [sp, #12]
 8003a7a:	3307      	adds	r3, #7
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a86:	443b      	add	r3, r7
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8a:	e767      	b.n	800395c <_vfiprintf_r+0x94>
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	2001      	movs	r0, #1
 8003a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a94:	e7a5      	b.n	80039e2 <_vfiprintf_r+0x11a>
 8003a96:	2300      	movs	r3, #0
 8003a98:	f04f 0c0a 	mov.w	ip, #10
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	3401      	adds	r4, #1
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa8:	3a30      	subs	r2, #48	; 0x30
 8003aaa:	2a09      	cmp	r2, #9
 8003aac:	d903      	bls.n	8003ab6 <_vfiprintf_r+0x1ee>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0c5      	beq.n	8003a3e <_vfiprintf_r+0x176>
 8003ab2:	9105      	str	r1, [sp, #20]
 8003ab4:	e7c3      	b.n	8003a3e <_vfiprintf_r+0x176>
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	2301      	movs	r3, #1
 8003aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8003abe:	e7f0      	b.n	8003aa2 <_vfiprintf_r+0x1da>
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	462a      	mov	r2, r5
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <_vfiprintf_r+0x25c>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	f3af 8000 	nop.w
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	1c78      	adds	r0, r7, #1
 8003ad4:	d1d6      	bne.n	8003a84 <_vfiprintf_r+0x1bc>
 8003ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ad8:	07d9      	lsls	r1, r3, #31
 8003ada:	d405      	bmi.n	8003ae8 <_vfiprintf_r+0x220>
 8003adc:	89ab      	ldrh	r3, [r5, #12]
 8003ade:	059a      	lsls	r2, r3, #22
 8003ae0:	d402      	bmi.n	8003ae8 <_vfiprintf_r+0x220>
 8003ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ae4:	f000 fc43 	bl	800436e <__retarget_lock_release_recursive>
 8003ae8:	89ab      	ldrh	r3, [r5, #12]
 8003aea:	065b      	lsls	r3, r3, #25
 8003aec:	f53f af12 	bmi.w	8003914 <_vfiprintf_r+0x4c>
 8003af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003af2:	e711      	b.n	8003918 <_vfiprintf_r+0x50>
 8003af4:	ab03      	add	r3, sp, #12
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	462a      	mov	r2, r5
 8003afa:	4630      	mov	r0, r6
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <_vfiprintf_r+0x25c>)
 8003afe:	a904      	add	r1, sp, #16
 8003b00:	f000 f882 	bl	8003c08 <_printf_i>
 8003b04:	e7e4      	b.n	8003ad0 <_vfiprintf_r+0x208>
 8003b06:	bf00      	nop
 8003b08:	0800510c 	.word	0x0800510c
 8003b0c:	0800512c 	.word	0x0800512c
 8003b10:	080050ec 	.word	0x080050ec
 8003b14:	080050b6 	.word	0x080050b6
 8003b18:	080050bc 	.word	0x080050bc
 8003b1c:	080050c0 	.word	0x080050c0
 8003b20:	00000000 	.word	0x00000000
 8003b24:	080038a3 	.word	0x080038a3

08003b28 <_printf_common>:
 8003b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	688a      	ldr	r2, [r1, #8]
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	4607      	mov	r7, r0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	bfb8      	it	lt
 8003b3a:	4613      	movlt	r3, r2
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b42:	460c      	mov	r4, r1
 8003b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b48:	b10a      	cbz	r2, 8003b4e <_printf_common+0x26>
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	0699      	lsls	r1, r3, #26
 8003b52:	bf42      	ittt	mi
 8003b54:	6833      	ldrmi	r3, [r6, #0]
 8003b56:	3302      	addmi	r3, #2
 8003b58:	6033      	strmi	r3, [r6, #0]
 8003b5a:	6825      	ldr	r5, [r4, #0]
 8003b5c:	f015 0506 	ands.w	r5, r5, #6
 8003b60:	d106      	bne.n	8003b70 <_printf_common+0x48>
 8003b62:	f104 0a19 	add.w	sl, r4, #25
 8003b66:	68e3      	ldr	r3, [r4, #12]
 8003b68:	6832      	ldr	r2, [r6, #0]
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	42ab      	cmp	r3, r5
 8003b6e:	dc28      	bgt.n	8003bc2 <_printf_common+0x9a>
 8003b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b74:	1e13      	subs	r3, r2, #0
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	bf18      	it	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	0692      	lsls	r2, r2, #26
 8003b7e:	d42d      	bmi.n	8003bdc <_printf_common+0xb4>
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d020      	beq.n	8003bd0 <_printf_common+0xa8>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	68e5      	ldr	r5, [r4, #12]
 8003b92:	f003 0306 	and.w	r3, r3, #6
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	bf18      	it	ne
 8003b9a:	2500      	movne	r5, #0
 8003b9c:	6832      	ldr	r2, [r6, #0]
 8003b9e:	f04f 0600 	mov.w	r6, #0
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	bf08      	it	eq
 8003ba6:	1aad      	subeq	r5, r5, r2
 8003ba8:	6922      	ldr	r2, [r4, #16]
 8003baa:	bf08      	it	eq
 8003bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bfc4      	itt	gt
 8003bb4:	1a9b      	subgt	r3, r3, r2
 8003bb6:	18ed      	addgt	r5, r5, r3
 8003bb8:	341a      	adds	r4, #26
 8003bba:	42b5      	cmp	r5, r6
 8003bbc:	d11a      	bne.n	8003bf4 <_printf_common+0xcc>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e008      	b.n	8003bd4 <_printf_common+0xac>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4652      	mov	r2, sl
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4638      	mov	r0, r7
 8003bca:	47c0      	blx	r8
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d103      	bne.n	8003bd8 <_printf_common+0xb0>
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	3501      	adds	r5, #1
 8003bda:	e7c4      	b.n	8003b66 <_printf_common+0x3e>
 8003bdc:	2030      	movs	r0, #48	; 0x30
 8003bde:	18e1      	adds	r1, r4, r3
 8003be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bea:	4422      	add	r2, r4
 8003bec:	3302      	adds	r3, #2
 8003bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf2:	e7c5      	b.n	8003b80 <_printf_common+0x58>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	47c0      	blx	r8
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d0e6      	beq.n	8003bd0 <_printf_common+0xa8>
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7d9      	b.n	8003bba <_printf_common+0x92>
	...

08003c08 <_printf_i>:
 8003c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	7e0f      	ldrb	r7, [r1, #24]
 8003c0e:	4691      	mov	r9, r2
 8003c10:	2f78      	cmp	r7, #120	; 0x78
 8003c12:	4680      	mov	r8, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	469a      	mov	sl, r3
 8003c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c1e:	d807      	bhi.n	8003c30 <_printf_i+0x28>
 8003c20:	2f62      	cmp	r7, #98	; 0x62
 8003c22:	d80a      	bhi.n	8003c3a <_printf_i+0x32>
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	f000 80d9 	beq.w	8003ddc <_printf_i+0x1d4>
 8003c2a:	2f58      	cmp	r7, #88	; 0x58
 8003c2c:	f000 80a4 	beq.w	8003d78 <_printf_i+0x170>
 8003c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c38:	e03a      	b.n	8003cb0 <_printf_i+0xa8>
 8003c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c3e:	2b15      	cmp	r3, #21
 8003c40:	d8f6      	bhi.n	8003c30 <_printf_i+0x28>
 8003c42:	a101      	add	r1, pc, #4	; (adr r1, 8003c48 <_printf_i+0x40>)
 8003c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003cb5 	.word	0x08003cb5
 8003c50:	08003c31 	.word	0x08003c31
 8003c54:	08003c31 	.word	0x08003c31
 8003c58:	08003c31 	.word	0x08003c31
 8003c5c:	08003c31 	.word	0x08003c31
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003c31 	.word	0x08003c31
 8003c68:	08003c31 	.word	0x08003c31
 8003c6c:	08003c31 	.word	0x08003c31
 8003c70:	08003c31 	.word	0x08003c31
 8003c74:	08003dc3 	.word	0x08003dc3
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003da5 	.word	0x08003da5
 8003c80:	08003c31 	.word	0x08003c31
 8003c84:	08003c31 	.word	0x08003c31
 8003c88:	08003de5 	.word	0x08003de5
 8003c8c:	08003c31 	.word	0x08003c31
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c31 	.word	0x08003c31
 8003c98:	08003c31 	.word	0x08003c31
 8003c9c:	08003dad 	.word	0x08003dad
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	1d1a      	adds	r2, r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	602a      	str	r2, [r5, #0]
 8003ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a4      	b.n	8003dfe <_printf_i+0x1f6>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	6829      	ldr	r1, [r5, #0]
 8003cb8:	0606      	lsls	r6, r0, #24
 8003cba:	f101 0304 	add.w	r3, r1, #4
 8003cbe:	d50a      	bpl.n	8003cd6 <_printf_i+0xce>
 8003cc0:	680e      	ldr	r6, [r1, #0]
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	2e00      	cmp	r6, #0
 8003cc6:	da03      	bge.n	8003cd0 <_printf_i+0xc8>
 8003cc8:	232d      	movs	r3, #45	; 0x2d
 8003cca:	4276      	negs	r6, r6
 8003ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd0:	230a      	movs	r3, #10
 8003cd2:	485e      	ldr	r0, [pc, #376]	; (8003e4c <_printf_i+0x244>)
 8003cd4:	e019      	b.n	8003d0a <_printf_i+0x102>
 8003cd6:	680e      	ldr	r6, [r1, #0]
 8003cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	bf18      	it	ne
 8003ce0:	b236      	sxthne	r6, r6
 8003ce2:	e7ef      	b.n	8003cc4 <_printf_i+0xbc>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	1d19      	adds	r1, r3, #4
 8003cea:	6029      	str	r1, [r5, #0]
 8003cec:	0601      	lsls	r1, r0, #24
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0xec>
 8003cf0:	681e      	ldr	r6, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <_printf_i+0xf2>
 8003cf4:	0646      	lsls	r6, r0, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0xe8>
 8003cf8:	881e      	ldrh	r6, [r3, #0]
 8003cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2308      	moveq	r3, #8
 8003d00:	230a      	movne	r3, #10
 8003d02:	4852      	ldr	r0, [pc, #328]	; (8003e4c <_printf_i+0x244>)
 8003d04:	2100      	movs	r1, #0
 8003d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0a:	6865      	ldr	r5, [r4, #4]
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	bfa8      	it	ge
 8003d10:	6821      	ldrge	r1, [r4, #0]
 8003d12:	60a5      	str	r5, [r4, #8]
 8003d14:	bfa4      	itt	ge
 8003d16:	f021 0104 	bicge.w	r1, r1, #4
 8003d1a:	6021      	strge	r1, [r4, #0]
 8003d1c:	b90e      	cbnz	r6, 8003d22 <_printf_i+0x11a>
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	d04d      	beq.n	8003dbe <_printf_i+0x1b6>
 8003d22:	4615      	mov	r5, r2
 8003d24:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d28:	fb03 6711 	mls	r7, r3, r1, r6
 8003d2c:	5dc7      	ldrb	r7, [r0, r7]
 8003d2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d32:	4637      	mov	r7, r6
 8003d34:	42bb      	cmp	r3, r7
 8003d36:	460e      	mov	r6, r1
 8003d38:	d9f4      	bls.n	8003d24 <_printf_i+0x11c>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d10b      	bne.n	8003d56 <_printf_i+0x14e>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	07de      	lsls	r6, r3, #31
 8003d42:	d508      	bpl.n	8003d56 <_printf_i+0x14e>
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	6861      	ldr	r1, [r4, #4]
 8003d48:	4299      	cmp	r1, r3
 8003d4a:	bfde      	ittt	le
 8003d4c:	2330      	movle	r3, #48	; 0x30
 8003d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d56:	1b52      	subs	r2, r2, r5
 8003d58:	6122      	str	r2, [r4, #16]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f8cd a000 	str.w	sl, [sp]
 8003d64:	aa03      	add	r2, sp, #12
 8003d66:	f7ff fedf 	bl	8003b28 <_printf_common>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d14c      	bne.n	8003e08 <_printf_i+0x200>
 8003d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d72:	b004      	add	sp, #16
 8003d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d78:	4834      	ldr	r0, [pc, #208]	; (8003e4c <_printf_i+0x244>)
 8003d7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d7e:	6829      	ldr	r1, [r5, #0]
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d86:	6029      	str	r1, [r5, #0]
 8003d88:	061d      	lsls	r5, r3, #24
 8003d8a:	d514      	bpl.n	8003db6 <_printf_i+0x1ae>
 8003d8c:	07df      	lsls	r7, r3, #31
 8003d8e:	bf44      	itt	mi
 8003d90:	f043 0320 	orrmi.w	r3, r3, #32
 8003d94:	6023      	strmi	r3, [r4, #0]
 8003d96:	b91e      	cbnz	r6, 8003da0 <_printf_i+0x198>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	f023 0320 	bic.w	r3, r3, #32
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	2310      	movs	r3, #16
 8003da2:	e7af      	b.n	8003d04 <_printf_i+0xfc>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	f043 0320 	orr.w	r3, r3, #32
 8003daa:	6023      	str	r3, [r4, #0]
 8003dac:	2378      	movs	r3, #120	; 0x78
 8003dae:	4828      	ldr	r0, [pc, #160]	; (8003e50 <_printf_i+0x248>)
 8003db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db4:	e7e3      	b.n	8003d7e <_printf_i+0x176>
 8003db6:	0659      	lsls	r1, r3, #25
 8003db8:	bf48      	it	mi
 8003dba:	b2b6      	uxthmi	r6, r6
 8003dbc:	e7e6      	b.n	8003d8c <_printf_i+0x184>
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	e7bb      	b.n	8003d3a <_printf_i+0x132>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	6826      	ldr	r6, [r4, #0]
 8003dc6:	1d18      	adds	r0, r3, #4
 8003dc8:	6961      	ldr	r1, [r4, #20]
 8003dca:	6028      	str	r0, [r5, #0]
 8003dcc:	0635      	lsls	r5, r6, #24
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	d501      	bpl.n	8003dd6 <_printf_i+0x1ce>
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	e002      	b.n	8003ddc <_printf_i+0x1d4>
 8003dd6:	0670      	lsls	r0, r6, #25
 8003dd8:	d5fb      	bpl.n	8003dd2 <_printf_i+0x1ca>
 8003dda:	8019      	strh	r1, [r3, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4615      	mov	r5, r2
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	e7ba      	b.n	8003d5a <_printf_i+0x152>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	602a      	str	r2, [r5, #0]
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 fb23 	bl	800443c <memchr>
 8003df6:	b108      	cbz	r0, 8003dfc <_printf_i+0x1f4>
 8003df8:	1b40      	subs	r0, r0, r5
 8003dfa:	6060      	str	r0, [r4, #4]
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	2300      	movs	r3, #0
 8003e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e06:	e7a8      	b.n	8003d5a <_printf_i+0x152>
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	47d0      	blx	sl
 8003e12:	3001      	adds	r0, #1
 8003e14:	d0ab      	beq.n	8003d6e <_printf_i+0x166>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	079b      	lsls	r3, r3, #30
 8003e1a:	d413      	bmi.n	8003e44 <_printf_i+0x23c>
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	4298      	cmp	r0, r3
 8003e22:	bfb8      	it	lt
 8003e24:	4618      	movlt	r0, r3
 8003e26:	e7a4      	b.n	8003d72 <_printf_i+0x16a>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4640      	mov	r0, r8
 8003e30:	47d0      	blx	sl
 8003e32:	3001      	adds	r0, #1
 8003e34:	d09b      	beq.n	8003d6e <_printf_i+0x166>
 8003e36:	3501      	adds	r5, #1
 8003e38:	68e3      	ldr	r3, [r4, #12]
 8003e3a:	9903      	ldr	r1, [sp, #12]
 8003e3c:	1a5b      	subs	r3, r3, r1
 8003e3e:	42ab      	cmp	r3, r5
 8003e40:	dcf2      	bgt.n	8003e28 <_printf_i+0x220>
 8003e42:	e7eb      	b.n	8003e1c <_printf_i+0x214>
 8003e44:	2500      	movs	r5, #0
 8003e46:	f104 0619 	add.w	r6, r4, #25
 8003e4a:	e7f5      	b.n	8003e38 <_printf_i+0x230>
 8003e4c:	080050c7 	.word	0x080050c7
 8003e50:	080050d8 	.word	0x080050d8

08003e54 <_sbrk_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	2300      	movs	r3, #0
 8003e58:	4d05      	ldr	r5, [pc, #20]	; (8003e70 <_sbrk_r+0x1c>)
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd faf8 	bl	8001454 <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_sbrk_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_sbrk_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	2000026c 	.word	0x2000026c

08003e74 <__swbuf_r>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	460e      	mov	r6, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	b118      	cbz	r0, 8003e86 <__swbuf_r+0x12>
 8003e7e:	6983      	ldr	r3, [r0, #24]
 8003e80:	b90b      	cbnz	r3, 8003e86 <__swbuf_r+0x12>
 8003e82:	f000 f9d5 	bl	8004230 <__sinit>
 8003e86:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <__swbuf_r+0x98>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d12b      	bne.n	8003ee4 <__swbuf_r+0x70>
 8003e8c:	686c      	ldr	r4, [r5, #4]
 8003e8e:	69a3      	ldr	r3, [r4, #24]
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	071a      	lsls	r2, r3, #28
 8003e96:	d52f      	bpl.n	8003ef8 <__swbuf_r+0x84>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	b36b      	cbz	r3, 8003ef8 <__swbuf_r+0x84>
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	b2f6      	uxtb	r6, r6
 8003ea2:	1ac0      	subs	r0, r0, r3
 8003ea4:	6963      	ldr	r3, [r4, #20]
 8003ea6:	4637      	mov	r7, r6
 8003ea8:	4283      	cmp	r3, r0
 8003eaa:	dc04      	bgt.n	8003eb6 <__swbuf_r+0x42>
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 f92a 	bl	8004108 <_fflush_r>
 8003eb4:	bb30      	cbnz	r0, 8003f04 <__swbuf_r+0x90>
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	3001      	adds	r0, #1
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60a3      	str	r3, [r4, #8]
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	701e      	strb	r6, [r3, #0]
 8003ec6:	6963      	ldr	r3, [r4, #20]
 8003ec8:	4283      	cmp	r3, r0
 8003eca:	d004      	beq.n	8003ed6 <__swbuf_r+0x62>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	07db      	lsls	r3, r3, #31
 8003ed0:	d506      	bpl.n	8003ee0 <__swbuf_r+0x6c>
 8003ed2:	2e0a      	cmp	r6, #10
 8003ed4:	d104      	bne.n	8003ee0 <__swbuf_r+0x6c>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 f915 	bl	8004108 <_fflush_r>
 8003ede:	b988      	cbnz	r0, 8003f04 <__swbuf_r+0x90>
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <__swbuf_r+0x9c>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <__swbuf_r+0x7a>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7cf      	b.n	8003e8e <__swbuf_r+0x1a>
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <__swbuf_r+0xa0>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7ca      	b.n	8003e8e <__swbuf_r+0x1a>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 f80c 	bl	8003f18 <__swsetup_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d0cb      	beq.n	8003e9c <__swbuf_r+0x28>
 8003f04:	f04f 37ff 	mov.w	r7, #4294967295
 8003f08:	e7ea      	b.n	8003ee0 <__swbuf_r+0x6c>
 8003f0a:	bf00      	nop
 8003f0c:	0800510c 	.word	0x0800510c
 8003f10:	0800512c 	.word	0x0800512c
 8003f14:	080050ec 	.word	0x080050ec

08003f18 <__swsetup_r>:
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <__swsetup_r+0xcc>)
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	681d      	ldr	r5, [r3, #0]
 8003f1e:	4606      	mov	r6, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	b125      	cbz	r5, 8003f2e <__swsetup_r+0x16>
 8003f24:	69ab      	ldr	r3, [r5, #24]
 8003f26:	b913      	cbnz	r3, 8003f2e <__swsetup_r+0x16>
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 f981 	bl	8004230 <__sinit>
 8003f2e:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <__swsetup_r+0xd0>)
 8003f30:	429c      	cmp	r4, r3
 8003f32:	d10f      	bne.n	8003f54 <__swsetup_r+0x3c>
 8003f34:	686c      	ldr	r4, [r5, #4]
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f3c:	0719      	lsls	r1, r3, #28
 8003f3e:	d42c      	bmi.n	8003f9a <__swsetup_r+0x82>
 8003f40:	06dd      	lsls	r5, r3, #27
 8003f42:	d411      	bmi.n	8003f68 <__swsetup_r+0x50>
 8003f44:	2309      	movs	r3, #9
 8003f46:	6033      	str	r3, [r6, #0]
 8003f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	e03e      	b.n	8003fd2 <__swsetup_r+0xba>
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <__swsetup_r+0xd4>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d101      	bne.n	8003f5e <__swsetup_r+0x46>
 8003f5a:	68ac      	ldr	r4, [r5, #8]
 8003f5c:	e7eb      	b.n	8003f36 <__swsetup_r+0x1e>
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <__swsetup_r+0xd8>)
 8003f60:	429c      	cmp	r4, r3
 8003f62:	bf08      	it	eq
 8003f64:	68ec      	ldreq	r4, [r5, #12]
 8003f66:	e7e6      	b.n	8003f36 <__swsetup_r+0x1e>
 8003f68:	0758      	lsls	r0, r3, #29
 8003f6a:	d512      	bpl.n	8003f92 <__swsetup_r+0x7a>
 8003f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f6e:	b141      	cbz	r1, 8003f82 <__swsetup_r+0x6a>
 8003f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f74:	4299      	cmp	r1, r3
 8003f76:	d002      	beq.n	8003f7e <__swsetup_r+0x66>
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff fa45 	bl	8003408 <_free_r>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6363      	str	r3, [r4, #52]	; 0x34
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6063      	str	r3, [r4, #4]
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f043 0308 	orr.w	r3, r3, #8
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	b94b      	cbnz	r3, 8003fb2 <__swsetup_r+0x9a>
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d003      	beq.n	8003fb2 <__swsetup_r+0x9a>
 8003faa:	4621      	mov	r1, r4
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 fa05 	bl	80043bc <__smakebuf_r>
 8003fb2:	89a0      	ldrh	r0, [r4, #12]
 8003fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fb8:	f010 0301 	ands.w	r3, r0, #1
 8003fbc:	d00a      	beq.n	8003fd4 <__swsetup_r+0xbc>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60a3      	str	r3, [r4, #8]
 8003fc2:	6963      	ldr	r3, [r4, #20]
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	61a3      	str	r3, [r4, #24]
 8003fc8:	6923      	ldr	r3, [r4, #16]
 8003fca:	b943      	cbnz	r3, 8003fde <__swsetup_r+0xc6>
 8003fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fd0:	d1ba      	bne.n	8003f48 <__swsetup_r+0x30>
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	0781      	lsls	r1, r0, #30
 8003fd6:	bf58      	it	pl
 8003fd8:	6963      	ldrpl	r3, [r4, #20]
 8003fda:	60a3      	str	r3, [r4, #8]
 8003fdc:	e7f4      	b.n	8003fc8 <__swsetup_r+0xb0>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e7f7      	b.n	8003fd2 <__swsetup_r+0xba>
 8003fe2:	bf00      	nop
 8003fe4:	20000058 	.word	0x20000058
 8003fe8:	0800510c 	.word	0x0800510c
 8003fec:	0800512c 	.word	0x0800512c
 8003ff0:	080050ec 	.word	0x080050ec

08003ff4 <abort>:
 8003ff4:	2006      	movs	r0, #6
 8003ff6:	b508      	push	{r3, lr}
 8003ff8:	f000 faba 	bl	8004570 <raise>
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f7fd f9b5 	bl	800136c <_exit>
	...

08004004 <__sflush_r>:
 8004004:	898a      	ldrh	r2, [r1, #12]
 8004006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004008:	4605      	mov	r5, r0
 800400a:	0710      	lsls	r0, r2, #28
 800400c:	460c      	mov	r4, r1
 800400e:	d457      	bmi.n	80040c0 <__sflush_r+0xbc>
 8004010:	684b      	ldr	r3, [r1, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dc04      	bgt.n	8004020 <__sflush_r+0x1c>
 8004016:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	dc01      	bgt.n	8004020 <__sflush_r+0x1c>
 800401c:	2000      	movs	r0, #0
 800401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004022:	2e00      	cmp	r6, #0
 8004024:	d0fa      	beq.n	800401c <__sflush_r+0x18>
 8004026:	2300      	movs	r3, #0
 8004028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800402c:	682f      	ldr	r7, [r5, #0]
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	d032      	beq.n	8004098 <__sflush_r+0x94>
 8004032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	075a      	lsls	r2, r3, #29
 8004038:	d505      	bpl.n	8004046 <__sflush_r+0x42>
 800403a:	6863      	ldr	r3, [r4, #4]
 800403c:	1ac0      	subs	r0, r0, r3
 800403e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004040:	b10b      	cbz	r3, 8004046 <__sflush_r+0x42>
 8004042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004044:	1ac0      	subs	r0, r0, r3
 8004046:	2300      	movs	r3, #0
 8004048:	4602      	mov	r2, r0
 800404a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800404c:	4628      	mov	r0, r5
 800404e:	6a21      	ldr	r1, [r4, #32]
 8004050:	47b0      	blx	r6
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	d106      	bne.n	8004066 <__sflush_r+0x62>
 8004058:	6829      	ldr	r1, [r5, #0]
 800405a:	291d      	cmp	r1, #29
 800405c:	d82c      	bhi.n	80040b8 <__sflush_r+0xb4>
 800405e:	4a29      	ldr	r2, [pc, #164]	; (8004104 <__sflush_r+0x100>)
 8004060:	40ca      	lsrs	r2, r1
 8004062:	07d6      	lsls	r6, r2, #31
 8004064:	d528      	bpl.n	80040b8 <__sflush_r+0xb4>
 8004066:	2200      	movs	r2, #0
 8004068:	6062      	str	r2, [r4, #4]
 800406a:	6922      	ldr	r2, [r4, #16]
 800406c:	04d9      	lsls	r1, r3, #19
 800406e:	6022      	str	r2, [r4, #0]
 8004070:	d504      	bpl.n	800407c <__sflush_r+0x78>
 8004072:	1c42      	adds	r2, r0, #1
 8004074:	d101      	bne.n	800407a <__sflush_r+0x76>
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	b903      	cbnz	r3, 800407c <__sflush_r+0x78>
 800407a:	6560      	str	r0, [r4, #84]	; 0x54
 800407c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800407e:	602f      	str	r7, [r5, #0]
 8004080:	2900      	cmp	r1, #0
 8004082:	d0cb      	beq.n	800401c <__sflush_r+0x18>
 8004084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004088:	4299      	cmp	r1, r3
 800408a:	d002      	beq.n	8004092 <__sflush_r+0x8e>
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff f9bb 	bl	8003408 <_free_r>
 8004092:	2000      	movs	r0, #0
 8004094:	6360      	str	r0, [r4, #52]	; 0x34
 8004096:	e7c2      	b.n	800401e <__sflush_r+0x1a>
 8004098:	6a21      	ldr	r1, [r4, #32]
 800409a:	2301      	movs	r3, #1
 800409c:	4628      	mov	r0, r5
 800409e:	47b0      	blx	r6
 80040a0:	1c41      	adds	r1, r0, #1
 80040a2:	d1c7      	bne.n	8004034 <__sflush_r+0x30>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0c4      	beq.n	8004034 <__sflush_r+0x30>
 80040aa:	2b1d      	cmp	r3, #29
 80040ac:	d001      	beq.n	80040b2 <__sflush_r+0xae>
 80040ae:	2b16      	cmp	r3, #22
 80040b0:	d101      	bne.n	80040b6 <__sflush_r+0xb2>
 80040b2:	602f      	str	r7, [r5, #0]
 80040b4:	e7b2      	b.n	800401c <__sflush_r+0x18>
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	e7ae      	b.n	800401e <__sflush_r+0x1a>
 80040c0:	690f      	ldr	r7, [r1, #16]
 80040c2:	2f00      	cmp	r7, #0
 80040c4:	d0aa      	beq.n	800401c <__sflush_r+0x18>
 80040c6:	0793      	lsls	r3, r2, #30
 80040c8:	bf18      	it	ne
 80040ca:	2300      	movne	r3, #0
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	bf08      	it	eq
 80040d0:	694b      	ldreq	r3, [r1, #20]
 80040d2:	1bf6      	subs	r6, r6, r7
 80040d4:	600f      	str	r7, [r1, #0]
 80040d6:	608b      	str	r3, [r1, #8]
 80040d8:	2e00      	cmp	r6, #0
 80040da:	dd9f      	ble.n	800401c <__sflush_r+0x18>
 80040dc:	4633      	mov	r3, r6
 80040de:	463a      	mov	r2, r7
 80040e0:	4628      	mov	r0, r5
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80040e8:	47e0      	blx	ip
 80040ea:	2800      	cmp	r0, #0
 80040ec:	dc06      	bgt.n	80040fc <__sflush_r+0xf8>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	e790      	b.n	800401e <__sflush_r+0x1a>
 80040fc:	4407      	add	r7, r0
 80040fe:	1a36      	subs	r6, r6, r0
 8004100:	e7ea      	b.n	80040d8 <__sflush_r+0xd4>
 8004102:	bf00      	nop
 8004104:	20400001 	.word	0x20400001

08004108 <_fflush_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	4605      	mov	r5, r0
 800410e:	460c      	mov	r4, r1
 8004110:	b913      	cbnz	r3, 8004118 <_fflush_r+0x10>
 8004112:	2500      	movs	r5, #0
 8004114:	4628      	mov	r0, r5
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	b118      	cbz	r0, 8004122 <_fflush_r+0x1a>
 800411a:	6983      	ldr	r3, [r0, #24]
 800411c:	b90b      	cbnz	r3, 8004122 <_fflush_r+0x1a>
 800411e:	f000 f887 	bl	8004230 <__sinit>
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <_fflush_r+0x6c>)
 8004124:	429c      	cmp	r4, r3
 8004126:	d11b      	bne.n	8004160 <_fflush_r+0x58>
 8004128:	686c      	ldr	r4, [r5, #4]
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ef      	beq.n	8004112 <_fflush_r+0xa>
 8004132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004134:	07d0      	lsls	r0, r2, #31
 8004136:	d404      	bmi.n	8004142 <_fflush_r+0x3a>
 8004138:	0599      	lsls	r1, r3, #22
 800413a:	d402      	bmi.n	8004142 <_fflush_r+0x3a>
 800413c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413e:	f000 f915 	bl	800436c <__retarget_lock_acquire_recursive>
 8004142:	4628      	mov	r0, r5
 8004144:	4621      	mov	r1, r4
 8004146:	f7ff ff5d 	bl	8004004 <__sflush_r>
 800414a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800414c:	4605      	mov	r5, r0
 800414e:	07da      	lsls	r2, r3, #31
 8004150:	d4e0      	bmi.n	8004114 <_fflush_r+0xc>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	059b      	lsls	r3, r3, #22
 8004156:	d4dd      	bmi.n	8004114 <_fflush_r+0xc>
 8004158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800415a:	f000 f908 	bl	800436e <__retarget_lock_release_recursive>
 800415e:	e7d9      	b.n	8004114 <_fflush_r+0xc>
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <_fflush_r+0x70>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d101      	bne.n	800416a <_fflush_r+0x62>
 8004166:	68ac      	ldr	r4, [r5, #8]
 8004168:	e7df      	b.n	800412a <_fflush_r+0x22>
 800416a:	4b04      	ldr	r3, [pc, #16]	; (800417c <_fflush_r+0x74>)
 800416c:	429c      	cmp	r4, r3
 800416e:	bf08      	it	eq
 8004170:	68ec      	ldreq	r4, [r5, #12]
 8004172:	e7da      	b.n	800412a <_fflush_r+0x22>
 8004174:	0800510c 	.word	0x0800510c
 8004178:	0800512c 	.word	0x0800512c
 800417c:	080050ec 	.word	0x080050ec

08004180 <std>:
 8004180:	2300      	movs	r3, #0
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	e9c0 3300 	strd	r3, r3, [r0]
 800418a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800418e:	6083      	str	r3, [r0, #8]
 8004190:	8181      	strh	r1, [r0, #12]
 8004192:	6643      	str	r3, [r0, #100]	; 0x64
 8004194:	81c2      	strh	r2, [r0, #14]
 8004196:	6183      	str	r3, [r0, #24]
 8004198:	4619      	mov	r1, r3
 800419a:	2208      	movs	r2, #8
 800419c:	305c      	adds	r0, #92	; 0x5c
 800419e:	f7ff f867 	bl	8003270 <memset>
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <std+0x38>)
 80041a4:	6224      	str	r4, [r4, #32]
 80041a6:	6263      	str	r3, [r4, #36]	; 0x24
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <std+0x3c>)
 80041aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <std+0x40>)
 80041ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <std+0x44>)
 80041b2:	6323      	str	r3, [r4, #48]	; 0x30
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	080045a9 	.word	0x080045a9
 80041bc:	080045cb 	.word	0x080045cb
 80041c0:	08004603 	.word	0x08004603
 80041c4:	08004627 	.word	0x08004627

080041c8 <_cleanup_r>:
 80041c8:	4901      	ldr	r1, [pc, #4]	; (80041d0 <_cleanup_r+0x8>)
 80041ca:	f000 b8af 	b.w	800432c <_fwalk_reent>
 80041ce:	bf00      	nop
 80041d0:	08004109 	.word	0x08004109

080041d4 <__sfmoreglue>:
 80041d4:	2268      	movs	r2, #104	; 0x68
 80041d6:	b570      	push	{r4, r5, r6, lr}
 80041d8:	1e4d      	subs	r5, r1, #1
 80041da:	4355      	muls	r5, r2
 80041dc:	460e      	mov	r6, r1
 80041de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041e2:	f7ff f979 	bl	80034d8 <_malloc_r>
 80041e6:	4604      	mov	r4, r0
 80041e8:	b140      	cbz	r0, 80041fc <__sfmoreglue+0x28>
 80041ea:	2100      	movs	r1, #0
 80041ec:	e9c0 1600 	strd	r1, r6, [r0]
 80041f0:	300c      	adds	r0, #12
 80041f2:	60a0      	str	r0, [r4, #8]
 80041f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041f8:	f7ff f83a 	bl	8003270 <memset>
 80041fc:	4620      	mov	r0, r4
 80041fe:	bd70      	pop	{r4, r5, r6, pc}

08004200 <__sfp_lock_acquire>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__sfp_lock_acquire+0x8>)
 8004202:	f000 b8b3 	b.w	800436c <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	20000269 	.word	0x20000269

0800420c <__sfp_lock_release>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__sfp_lock_release+0x8>)
 800420e:	f000 b8ae 	b.w	800436e <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	20000269 	.word	0x20000269

08004218 <__sinit_lock_acquire>:
 8004218:	4801      	ldr	r0, [pc, #4]	; (8004220 <__sinit_lock_acquire+0x8>)
 800421a:	f000 b8a7 	b.w	800436c <__retarget_lock_acquire_recursive>
 800421e:	bf00      	nop
 8004220:	2000026a 	.word	0x2000026a

08004224 <__sinit_lock_release>:
 8004224:	4801      	ldr	r0, [pc, #4]	; (800422c <__sinit_lock_release+0x8>)
 8004226:	f000 b8a2 	b.w	800436e <__retarget_lock_release_recursive>
 800422a:	bf00      	nop
 800422c:	2000026a 	.word	0x2000026a

08004230 <__sinit>:
 8004230:	b510      	push	{r4, lr}
 8004232:	4604      	mov	r4, r0
 8004234:	f7ff fff0 	bl	8004218 <__sinit_lock_acquire>
 8004238:	69a3      	ldr	r3, [r4, #24]
 800423a:	b11b      	cbz	r3, 8004244 <__sinit+0x14>
 800423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004240:	f7ff bff0 	b.w	8004224 <__sinit_lock_release>
 8004244:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004248:	6523      	str	r3, [r4, #80]	; 0x50
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <__sinit+0x68>)
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <__sinit+0x6c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	62a2      	str	r2, [r4, #40]	; 0x28
 8004252:	42a3      	cmp	r3, r4
 8004254:	bf08      	it	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	4620      	mov	r0, r4
 800425a:	bf08      	it	eq
 800425c:	61a3      	streq	r3, [r4, #24]
 800425e:	f000 f81f 	bl	80042a0 <__sfp>
 8004262:	6060      	str	r0, [r4, #4]
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f81b 	bl	80042a0 <__sfp>
 800426a:	60a0      	str	r0, [r4, #8]
 800426c:	4620      	mov	r0, r4
 800426e:	f000 f817 	bl	80042a0 <__sfp>
 8004272:	2200      	movs	r2, #0
 8004274:	2104      	movs	r1, #4
 8004276:	60e0      	str	r0, [r4, #12]
 8004278:	6860      	ldr	r0, [r4, #4]
 800427a:	f7ff ff81 	bl	8004180 <std>
 800427e:	2201      	movs	r2, #1
 8004280:	2109      	movs	r1, #9
 8004282:	68a0      	ldr	r0, [r4, #8]
 8004284:	f7ff ff7c 	bl	8004180 <std>
 8004288:	2202      	movs	r2, #2
 800428a:	2112      	movs	r1, #18
 800428c:	68e0      	ldr	r0, [r4, #12]
 800428e:	f7ff ff77 	bl	8004180 <std>
 8004292:	2301      	movs	r3, #1
 8004294:	61a3      	str	r3, [r4, #24]
 8004296:	e7d1      	b.n	800423c <__sinit+0xc>
 8004298:	08005004 	.word	0x08005004
 800429c:	080041c9 	.word	0x080041c9

080042a0 <__sfp>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	4607      	mov	r7, r0
 80042a4:	f7ff ffac 	bl	8004200 <__sfp_lock_acquire>
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <__sfp+0x84>)
 80042aa:	681e      	ldr	r6, [r3, #0]
 80042ac:	69b3      	ldr	r3, [r6, #24]
 80042ae:	b913      	cbnz	r3, 80042b6 <__sfp+0x16>
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7ff ffbd 	bl	8004230 <__sinit>
 80042b6:	3648      	adds	r6, #72	; 0x48
 80042b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042bc:	3b01      	subs	r3, #1
 80042be:	d503      	bpl.n	80042c8 <__sfp+0x28>
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	b30b      	cbz	r3, 8004308 <__sfp+0x68>
 80042c4:	6836      	ldr	r6, [r6, #0]
 80042c6:	e7f7      	b.n	80042b8 <__sfp+0x18>
 80042c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042cc:	b9d5      	cbnz	r5, 8004304 <__sfp+0x64>
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <__sfp+0x88>)
 80042d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042d4:	60e3      	str	r3, [r4, #12]
 80042d6:	6665      	str	r5, [r4, #100]	; 0x64
 80042d8:	f000 f847 	bl	800436a <__retarget_lock_init_recursive>
 80042dc:	f7ff ff96 	bl	800420c <__sfp_lock_release>
 80042e0:	2208      	movs	r2, #8
 80042e2:	4629      	mov	r1, r5
 80042e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042ec:	6025      	str	r5, [r4, #0]
 80042ee:	61a5      	str	r5, [r4, #24]
 80042f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042f4:	f7fe ffbc 	bl	8003270 <memset>
 80042f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004300:	4620      	mov	r0, r4
 8004302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004304:	3468      	adds	r4, #104	; 0x68
 8004306:	e7d9      	b.n	80042bc <__sfp+0x1c>
 8004308:	2104      	movs	r1, #4
 800430a:	4638      	mov	r0, r7
 800430c:	f7ff ff62 	bl	80041d4 <__sfmoreglue>
 8004310:	4604      	mov	r4, r0
 8004312:	6030      	str	r0, [r6, #0]
 8004314:	2800      	cmp	r0, #0
 8004316:	d1d5      	bne.n	80042c4 <__sfp+0x24>
 8004318:	f7ff ff78 	bl	800420c <__sfp_lock_release>
 800431c:	230c      	movs	r3, #12
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	e7ee      	b.n	8004300 <__sfp+0x60>
 8004322:	bf00      	nop
 8004324:	08005004 	.word	0x08005004
 8004328:	ffff0001 	.word	0xffff0001

0800432c <_fwalk_reent>:
 800432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004330:	4606      	mov	r6, r0
 8004332:	4688      	mov	r8, r1
 8004334:	2700      	movs	r7, #0
 8004336:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800433a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800433e:	f1b9 0901 	subs.w	r9, r9, #1
 8004342:	d505      	bpl.n	8004350 <_fwalk_reent+0x24>
 8004344:	6824      	ldr	r4, [r4, #0]
 8004346:	2c00      	cmp	r4, #0
 8004348:	d1f7      	bne.n	800433a <_fwalk_reent+0xe>
 800434a:	4638      	mov	r0, r7
 800434c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004350:	89ab      	ldrh	r3, [r5, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d907      	bls.n	8004366 <_fwalk_reent+0x3a>
 8004356:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800435a:	3301      	adds	r3, #1
 800435c:	d003      	beq.n	8004366 <_fwalk_reent+0x3a>
 800435e:	4629      	mov	r1, r5
 8004360:	4630      	mov	r0, r6
 8004362:	47c0      	blx	r8
 8004364:	4307      	orrs	r7, r0
 8004366:	3568      	adds	r5, #104	; 0x68
 8004368:	e7e9      	b.n	800433e <_fwalk_reent+0x12>

0800436a <__retarget_lock_init_recursive>:
 800436a:	4770      	bx	lr

0800436c <__retarget_lock_acquire_recursive>:
 800436c:	4770      	bx	lr

0800436e <__retarget_lock_release_recursive>:
 800436e:	4770      	bx	lr

08004370 <__swhatbuf_r>:
 8004370:	b570      	push	{r4, r5, r6, lr}
 8004372:	460e      	mov	r6, r1
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	4614      	mov	r4, r2
 800437a:	2900      	cmp	r1, #0
 800437c:	461d      	mov	r5, r3
 800437e:	b096      	sub	sp, #88	; 0x58
 8004380:	da08      	bge.n	8004394 <__swhatbuf_r+0x24>
 8004382:	2200      	movs	r2, #0
 8004384:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004388:	602a      	str	r2, [r5, #0]
 800438a:	061a      	lsls	r2, r3, #24
 800438c:	d410      	bmi.n	80043b0 <__swhatbuf_r+0x40>
 800438e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004392:	e00e      	b.n	80043b2 <__swhatbuf_r+0x42>
 8004394:	466a      	mov	r2, sp
 8004396:	f000 f96d 	bl	8004674 <_fstat_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	dbf1      	blt.n	8004382 <__swhatbuf_r+0x12>
 800439e:	9a01      	ldr	r2, [sp, #4]
 80043a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043a8:	425a      	negs	r2, r3
 80043aa:	415a      	adcs	r2, r3
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	e7ee      	b.n	800438e <__swhatbuf_r+0x1e>
 80043b0:	2340      	movs	r3, #64	; 0x40
 80043b2:	2000      	movs	r0, #0
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	b016      	add	sp, #88	; 0x58
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080043bc <__smakebuf_r>:
 80043bc:	898b      	ldrh	r3, [r1, #12]
 80043be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043c0:	079d      	lsls	r5, r3, #30
 80043c2:	4606      	mov	r6, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	d507      	bpl.n	80043d8 <__smakebuf_r+0x1c>
 80043c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2301      	movs	r3, #1
 80043d2:	6163      	str	r3, [r4, #20]
 80043d4:	b002      	add	sp, #8
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	466a      	mov	r2, sp
 80043da:	ab01      	add	r3, sp, #4
 80043dc:	f7ff ffc8 	bl	8004370 <__swhatbuf_r>
 80043e0:	9900      	ldr	r1, [sp, #0]
 80043e2:	4605      	mov	r5, r0
 80043e4:	4630      	mov	r0, r6
 80043e6:	f7ff f877 	bl	80034d8 <_malloc_r>
 80043ea:	b948      	cbnz	r0, 8004400 <__smakebuf_r+0x44>
 80043ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f0:	059a      	lsls	r2, r3, #22
 80043f2:	d4ef      	bmi.n	80043d4 <__smakebuf_r+0x18>
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	e7e3      	b.n	80043c8 <__smakebuf_r+0xc>
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <__smakebuf_r+0x7c>)
 8004402:	62b3      	str	r3, [r6, #40]	; 0x28
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	6020      	str	r0, [r4, #0]
 8004408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	9b00      	ldr	r3, [sp, #0]
 8004410:	6120      	str	r0, [r4, #16]
 8004412:	6163      	str	r3, [r4, #20]
 8004414:	9b01      	ldr	r3, [sp, #4]
 8004416:	b15b      	cbz	r3, 8004430 <__smakebuf_r+0x74>
 8004418:	4630      	mov	r0, r6
 800441a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800441e:	f000 f93b 	bl	8004698 <_isatty_r>
 8004422:	b128      	cbz	r0, 8004430 <__smakebuf_r+0x74>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	89a0      	ldrh	r0, [r4, #12]
 8004432:	4305      	orrs	r5, r0
 8004434:	81a5      	strh	r5, [r4, #12]
 8004436:	e7cd      	b.n	80043d4 <__smakebuf_r+0x18>
 8004438:	080041c9 	.word	0x080041c9

0800443c <memchr>:
 800443c:	4603      	mov	r3, r0
 800443e:	b510      	push	{r4, lr}
 8004440:	b2c9      	uxtb	r1, r1
 8004442:	4402      	add	r2, r0
 8004444:	4293      	cmp	r3, r2
 8004446:	4618      	mov	r0, r3
 8004448:	d101      	bne.n	800444e <memchr+0x12>
 800444a:	2000      	movs	r0, #0
 800444c:	e003      	b.n	8004456 <memchr+0x1a>
 800444e:	7804      	ldrb	r4, [r0, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	428c      	cmp	r4, r1
 8004454:	d1f6      	bne.n	8004444 <memchr+0x8>
 8004456:	bd10      	pop	{r4, pc}

08004458 <memcpy>:
 8004458:	440a      	add	r2, r1
 800445a:	4291      	cmp	r1, r2
 800445c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004460:	d100      	bne.n	8004464 <memcpy+0xc>
 8004462:	4770      	bx	lr
 8004464:	b510      	push	{r4, lr}
 8004466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800446a:	4291      	cmp	r1, r2
 800446c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004470:	d1f9      	bne.n	8004466 <memcpy+0xe>
 8004472:	bd10      	pop	{r4, pc}

08004474 <memmove>:
 8004474:	4288      	cmp	r0, r1
 8004476:	b510      	push	{r4, lr}
 8004478:	eb01 0402 	add.w	r4, r1, r2
 800447c:	d902      	bls.n	8004484 <memmove+0x10>
 800447e:	4284      	cmp	r4, r0
 8004480:	4623      	mov	r3, r4
 8004482:	d807      	bhi.n	8004494 <memmove+0x20>
 8004484:	1e43      	subs	r3, r0, #1
 8004486:	42a1      	cmp	r1, r4
 8004488:	d008      	beq.n	800449c <memmove+0x28>
 800448a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004492:	e7f8      	b.n	8004486 <memmove+0x12>
 8004494:	4601      	mov	r1, r0
 8004496:	4402      	add	r2, r0
 8004498:	428a      	cmp	r2, r1
 800449a:	d100      	bne.n	800449e <memmove+0x2a>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044a6:	e7f7      	b.n	8004498 <memmove+0x24>

080044a8 <__malloc_lock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <__malloc_lock+0x8>)
 80044aa:	f7ff bf5f 	b.w	800436c <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	20000268 	.word	0x20000268

080044b4 <__malloc_unlock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__malloc_unlock+0x8>)
 80044b6:	f7ff bf5a 	b.w	800436e <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	20000268 	.word	0x20000268

080044c0 <_realloc_r>:
 80044c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c4:	4680      	mov	r8, r0
 80044c6:	4614      	mov	r4, r2
 80044c8:	460e      	mov	r6, r1
 80044ca:	b921      	cbnz	r1, 80044d6 <_realloc_r+0x16>
 80044cc:	4611      	mov	r1, r2
 80044ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d2:	f7ff b801 	b.w	80034d8 <_malloc_r>
 80044d6:	b92a      	cbnz	r2, 80044e4 <_realloc_r+0x24>
 80044d8:	f7fe ff96 	bl	8003408 <_free_r>
 80044dc:	4625      	mov	r5, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e4:	f000 f8fa 	bl	80046dc <_malloc_usable_size_r>
 80044e8:	4284      	cmp	r4, r0
 80044ea:	4607      	mov	r7, r0
 80044ec:	d802      	bhi.n	80044f4 <_realloc_r+0x34>
 80044ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044f2:	d812      	bhi.n	800451a <_realloc_r+0x5a>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7fe ffee 	bl	80034d8 <_malloc_r>
 80044fc:	4605      	mov	r5, r0
 80044fe:	2800      	cmp	r0, #0
 8004500:	d0ed      	beq.n	80044de <_realloc_r+0x1e>
 8004502:	42bc      	cmp	r4, r7
 8004504:	4622      	mov	r2, r4
 8004506:	4631      	mov	r1, r6
 8004508:	bf28      	it	cs
 800450a:	463a      	movcs	r2, r7
 800450c:	f7ff ffa4 	bl	8004458 <memcpy>
 8004510:	4631      	mov	r1, r6
 8004512:	4640      	mov	r0, r8
 8004514:	f7fe ff78 	bl	8003408 <_free_r>
 8004518:	e7e1      	b.n	80044de <_realloc_r+0x1e>
 800451a:	4635      	mov	r5, r6
 800451c:	e7df      	b.n	80044de <_realloc_r+0x1e>

0800451e <_raise_r>:
 800451e:	291f      	cmp	r1, #31
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4604      	mov	r4, r0
 8004524:	460d      	mov	r5, r1
 8004526:	d904      	bls.n	8004532 <_raise_r+0x14>
 8004528:	2316      	movs	r3, #22
 800452a:	6003      	str	r3, [r0, #0]
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	bd38      	pop	{r3, r4, r5, pc}
 8004532:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004534:	b112      	cbz	r2, 800453c <_raise_r+0x1e>
 8004536:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800453a:	b94b      	cbnz	r3, 8004550 <_raise_r+0x32>
 800453c:	4620      	mov	r0, r4
 800453e:	f000 f831 	bl	80045a4 <_getpid_r>
 8004542:	462a      	mov	r2, r5
 8004544:	4601      	mov	r1, r0
 8004546:	4620      	mov	r0, r4
 8004548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800454c:	f000 b818 	b.w	8004580 <_kill_r>
 8004550:	2b01      	cmp	r3, #1
 8004552:	d00a      	beq.n	800456a <_raise_r+0x4c>
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	d103      	bne.n	8004560 <_raise_r+0x42>
 8004558:	2316      	movs	r3, #22
 800455a:	6003      	str	r3, [r0, #0]
 800455c:	2001      	movs	r0, #1
 800455e:	e7e7      	b.n	8004530 <_raise_r+0x12>
 8004560:	2400      	movs	r4, #0
 8004562:	4628      	mov	r0, r5
 8004564:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004568:	4798      	blx	r3
 800456a:	2000      	movs	r0, #0
 800456c:	e7e0      	b.n	8004530 <_raise_r+0x12>
	...

08004570 <raise>:
 8004570:	4b02      	ldr	r3, [pc, #8]	; (800457c <raise+0xc>)
 8004572:	4601      	mov	r1, r0
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f7ff bfd2 	b.w	800451e <_raise_r>
 800457a:	bf00      	nop
 800457c:	20000058 	.word	0x20000058

08004580 <_kill_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	2300      	movs	r3, #0
 8004584:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_kill_r+0x20>)
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	f7fc fedd 	bl	800134c <_kill>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d102      	bne.n	800459c <_kill_r+0x1c>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	b103      	cbz	r3, 800459c <_kill_r+0x1c>
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	2000026c 	.word	0x2000026c

080045a4 <_getpid_r>:
 80045a4:	f7fc becb 	b.w	800133e <_getpid>

080045a8 <__sread>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	460c      	mov	r4, r1
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	f000 f89c 	bl	80046ec <_read_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	bfab      	itete	ge
 80045b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ba:	89a3      	ldrhlt	r3, [r4, #12]
 80045bc:	181b      	addge	r3, r3, r0
 80045be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045c2:	bfac      	ite	ge
 80045c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045c6:	81a3      	strhlt	r3, [r4, #12]
 80045c8:	bd10      	pop	{r4, pc}

080045ca <__swrite>:
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	461f      	mov	r7, r3
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	4605      	mov	r5, r0
 80045d4:	05db      	lsls	r3, r3, #23
 80045d6:	460c      	mov	r4, r1
 80045d8:	4616      	mov	r6, r2
 80045da:	d505      	bpl.n	80045e8 <__swrite+0x1e>
 80045dc:	2302      	movs	r3, #2
 80045de:	2200      	movs	r2, #0
 80045e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e4:	f000 f868 	bl	80046b8 <_lseek_r>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	4632      	mov	r2, r6
 80045ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f0:	81a3      	strh	r3, [r4, #12]
 80045f2:	4628      	mov	r0, r5
 80045f4:	463b      	mov	r3, r7
 80045f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fe:	f000 b817 	b.w	8004630 <_write_r>

08004602 <__sseek>:
 8004602:	b510      	push	{r4, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 f855 	bl	80046b8 <_lseek_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	bf15      	itete	ne
 8004614:	6560      	strne	r0, [r4, #84]	; 0x54
 8004616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800461a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800461e:	81a3      	strheq	r3, [r4, #12]
 8004620:	bf18      	it	ne
 8004622:	81a3      	strhne	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__sclose>:
 8004626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462a:	f000 b813 	b.w	8004654 <_close_r>
	...

08004630 <_write_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	2200      	movs	r2, #0
 800463a:	4d05      	ldr	r5, [pc, #20]	; (8004650 <_write_r+0x20>)
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc febb 	bl	80013ba <_write>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_write_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_write_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	2000026c 	.word	0x2000026c

08004654 <_close_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	2300      	movs	r3, #0
 8004658:	4d05      	ldr	r5, [pc, #20]	; (8004670 <_close_r+0x1c>)
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fc fec7 	bl	80013f2 <_close>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_close_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_close_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	2000026c 	.word	0x2000026c

08004674 <_fstat_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	2300      	movs	r3, #0
 8004678:	4d06      	ldr	r5, [pc, #24]	; (8004694 <_fstat_r+0x20>)
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f7fc fec1 	bl	8001408 <_fstat>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d102      	bne.n	8004690 <_fstat_r+0x1c>
 800468a:	682b      	ldr	r3, [r5, #0]
 800468c:	b103      	cbz	r3, 8004690 <_fstat_r+0x1c>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	2000026c 	.word	0x2000026c

08004698 <_isatty_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	2300      	movs	r3, #0
 800469c:	4d05      	ldr	r5, [pc, #20]	; (80046b4 <_isatty_r+0x1c>)
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc febf 	bl	8001426 <_isatty>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_isatty_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_isatty_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	2000026c 	.word	0x2000026c

080046b8 <_lseek_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	2200      	movs	r2, #0
 80046c2:	4d05      	ldr	r5, [pc, #20]	; (80046d8 <_lseek_r+0x20>)
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f7fc feb7 	bl	800143a <_lseek>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_lseek_r+0x1e>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_lseek_r+0x1e>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	2000026c 	.word	0x2000026c

080046dc <_malloc_usable_size_r>:
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfbc      	itt	lt
 80046e6:	580b      	ldrlt	r3, [r1, r0]
 80046e8:	18c0      	addlt	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <_read_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	2200      	movs	r2, #0
 80046f6:	4d05      	ldr	r5, [pc, #20]	; (800470c <_read_r+0x20>)
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fc fe40 	bl	8001380 <_read>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_read_r+0x1e>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_read_r+0x1e>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	2000026c 	.word	0x2000026c

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
